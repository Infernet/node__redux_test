{"version":3,"sources":["serviceWorker.js","views/components/Authenticated/InputLogin.jsx","views/components/Authenticated/InputPassword.jsx","constants/authorization.js","constants/token.js","reducers/userReducer.js","constants/users.js","reducers/usersReducer.js","constants/userOperationType.js","reducers/tokenReducer.js","reducers/userFormReducer.js","reducers/rootReducer.js","store/configureStore.js","views/components/NavBar/NavBarLink.jsx","views/components/NavBar/NavBar.jsx","views/components/Header/Header.jsx","views/components/Footer/Footer.jsx","containers/Authorization.jsx","actions/loginAuthActions.js","views/components/Home/ContentCart.jsx","containers/Home.jsx","containers/Authenticated.jsx","actions/tokenAuthActions.js","actions/usersActions.js","views/components/Users/ControlPanel.jsx","views/components/Users/User.jsx","views/components/Users/InsertUserForm.jsx","actions/userFormHandlerActions.js","containers/UsersList.jsx","routes/index.jsx","containers/App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","InputLogin","props","onChange","bind","e","this","setValue","target","value","className","class","htmlFor","type","id","name","placeholder","login","autoComplete","React","Component","InputPassword","password","CHANGE_LOGIN","CHANGE_PASSWORD","SIGN_IN_SUCCESS","SIGN_IN_REQUEST","SIGN_IN_FAILED","SIGN_OUT","SIGN_OUT_TOKEN","RESTORE_TOKEN","CLEAR_TOKEN_DATA","AUTH_WITH_TOKEN_SUCCESS","AUTH_WITH_TOKEN_FAILED","REFRESH_TOKEN_SUCCESS","REFRESH_TOKEN_FAILED","initialState","role","CLEAR_USER_DATA","GET_USERS_SUCCESS","GET_USERS_FAILED","CHANGE_USER","INSERT_USER_SUCCESS","INSERT_USER_FAILED","UPDATE_USER_SUCCESS","UPDATE_USER_FAILED","DELETE_USER_SUCCESS","DELETE_USER_FAILED","CHANGE_OPERATION","FORM_CHANGE_LOGIN","FORM_CHANGE_PASSWORD","FORM_CHANGE_FIRST_NAME","FORM_CHANGE_LAST_NAME","FORM_CHANGE_EMAIL","FORM_CHANGE_ROLE","selectedId","selectedOperation","users","userData","accessToken","refreshToken","email","firstName","lastName","rootReducer","combineReducers","user","state","action","Object","assign","payload","token","userList","userFormsData","store","createStore","applyMiddleware","thunk","logger","NavBarLink","exact","activeClassName","to","link","NavBar","Header","src","alt","Footer","Authorization","handleSubmit","preventDefault","signIn","setLogin","setPassword","onSubmit","propsTypes","PropTypes","string","isRequired","func","connect","dispatch","changeLogin","changePassword","data","authStore","getState","Fingerprint2","getV18","fingerPrint","axios","post","then","response","localStorage","setItem","catch","reason","ContentCart","container","title","content","Home","classNames","keys","map","key","Authenticated","onClick","signOut","tokenStore","tokenAuth","headers","finally","removeItem","status","Error","request","refreshAccessToken","changeUser","getUsers","insertUser","userDataStore","ControlPanel","onInsertUser","onUpdateUser","onDeleteUser","onShowUsers","selectOperation","object","operation","changeOperation","User","onSelect","select","InsertUserForm","changeFirstName","changeLastName","changeEmail","changeRadio","handlerForm","required","defaultChecked","changeRole","UsersList","selectUser","style","height","width","display","color","margin","Routes","path","component","from","UserList","App","restoreToken","getItem","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9c118f71.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types'\n\nclass InputLogin extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(e) {\n        this.props.setValue(e.target.value);\n    }\n\n    render() {\n        return (\n            <div className={'block'+this.props.class}>\n                <label htmlFor=\"login\" className={'label'+this.props.class}>Login</label>\n                <input type=\"text\"\n                       id={\"login\"}\n                       name={\"login\"}\n                       className={'input'+this.props.class}\n                       onChange={this.onChange}\n                       placeholder={this.props.login}\n                       autoComplete={'false'}\n                />\n            </div>\n        );\n    }\n\n}\n\nInputLogin.propTypes = {\n    login: PropTypes.string,\n    class: PropTypes.string.isRequired\n};\n\nexport default InputLogin;","import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nclass InputPassword extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(e) {\n        this.props.setValue(e.target.value);\n    }\n\n    render() {\n        return (\n            <div className={'block'+this.props.class}>\n                <label htmlFor=\"password\" className={'label'+this.props.class}>Password</label>\n                <input type=\"password\"\n                       id={\"password\"}\n                       name={\"password\"}\n                       className={'input'+this.props.class}\n                       onChange={this.onChange}\n                       placeholder={this.props.password}\n                       autoComplete={'false'}\n                />\n            </div>\n        );\n    }\n\n}\n\nInputPassword.propTypes = {\n    password: PropTypes.string,\n    class:PropTypes.string.isRequired\n};\n\nexport default InputPassword;","export const CHANGE_LOGIN = \"CHANGE_LOGIN\";\nexport const CHANGE_PASSWORD = \"CHANGE_PASSWORD\";\nexport const SIGN_IN_SUCCESS = \"SIGN_IN_SUCCESS\";\nexport const SIGN_IN_REQUEST = \"SIGN_IN_REQUEST\";\nexport const SIGN_IN_FAILED = \"SIGN_IN_FAILED\";\nexport const SIGN_OUT = \"SIGN_OUT\";\nexport const TEST=\"TEST\";","//sign out\nexport const SIGN_OUT_TOKEN = \"SIGN_OUT_TOKEN\";\n//restore token\nexport const RESTORE_TOKEN = \"RESTORE_TOKEN\";\nexport const CLEAR_TOKEN_DATA=\"CLEAR_TOKEN_DATA\";\n//auth with access token\nexport const AUTH_WITH_TOKEN_REQUEST = \"AUTH_WITH_TOKEN_REQUEST\";\nexport const AUTH_WITH_TOKEN_SUCCESS = \"AUTH_WITH_TOKEN_SUCCESS\";\nexport const AUTH_WITH_TOKEN_FAILED = \"AUTH_WITH_TOKEN_FAILED\";\n//try to get Access Token\nexport const REFRESH_TOKEN_REQUEST = \"REFRESH_TOKEN_REQUEST\";\nexport const REFRESH_TOKEN_SUCCESS = \"REFRESH_TOKEN_SUCCESS\";\nexport const REFRESH_TOKEN_FAILED = \"REFRESH_TOKEN_FAILED\";","import {\n    CHANGE_LOGIN,\n    CHANGE_PASSWORD,\n    SIGN_IN_FAILED,\n    SIGN_IN_REQUEST,\n    SIGN_IN_SUCCESS,\n    SIGN_OUT,\n} from \"../constants/authorization\";\n\nconst initialState = {\n    id: null,\n    role:0,\n    login: \"\",\n    password: \"\"\n};\n\nexport function userReducer(state = initialState, action) {\n    switch (action.type) {\n        case CHANGE_LOGIN:\n            return Object.assign({}, state, {login: action.payload});\n        case CHANGE_PASSWORD:\n            return Object.assign({}, state, {password: action.payload});\n        case SIGN_IN_REQUEST:\n            return state;\n        case SIGN_IN_SUCCESS:\n            return Object.assign({}, state, action.payload, {password: \"\"});\n        case SIGN_IN_FAILED:\n            return Object.assign({}, state, action.payload );\n        case SIGN_OUT:\n            return Object.assign({}, initialState);\n        default:\n            return state;\n    }\n}","export const CLEAR_USER_DATA = \"CLEAR_USER_DATA\";\nexport const GET_USERS_SUCCESS = \"GET_USERS_SUCCESS\";\nexport const GET_USERS_FAILED = \"GET_USERS_FAILED\";\nexport const CHANGE_USER = \"CHANGE_USER\";\nexport const INSERT_USER_SUCCESS = \"INSERT_USER_SUCCESS\";\nexport const INSERT_USER_FAILED = \"INSERT_USER_FAILED\";\nexport const UPDATE_USER_SUCCESS = \"UPDATE_USER_SUCCESS\";\nexport const UPDATE_USER_FAILED = \"UPDATE_USER_FAILED\";\nexport const DELETE_USER_SUCCESS = \"DELETE_USER_SUCCESS\";\nexport const DELETE_USER_FAILED = \"DELETE_USER_FAILED\";\nexport const CHANGE_OPERATION = \"CHANGE_OPERATION\";\nexport const FORM_CHANGE_LOGIN = \"FORM_CHANGE_LOGIN\";\nexport const FORM_CHANGE_PASSWORD = \"FORM_CHANGE_PASSWORD\";\nexport const FORM_CHANGE_FIRST_NAME = \"FORM_CHANGE_FIRST_NAME\";\nexport const FORM_CHANGE_LAST_NAME = \"FORM_CHANGE_LAST_NAME\";\nexport const FORM_CHANGE_EMAIL = \"FORM_CHANGE_EMAIL\";\nexport const FORM_CHANGE_ROLE = \"FORM_CHANGE_ROLE\";","import {\n    CHANGE_OPERATION,\n    CHANGE_USER,\n    DELETE_USER_FAILED,\n    DELETE_USER_SUCCESS,\n    GET_USERS_FAILED,\n    GET_USERS_SUCCESS,\n    INSERT_USER_FAILED,\n    INSERT_USER_SUCCESS,\n    UPDATE_USER_FAILED,\n    UPDATE_USER_SUCCESS\n} from \"../constants/users\";\nimport {OPERATION_SHOW_LIST} from \"../constants/userOperationType\";\n\nconst initialState = {\n    selectedId: null,\n    selectedOperation: OPERATION_SHOW_LIST,\n    users: [],\n    userData: ['id', 'login', 'role', 'email', 'first name', 'last name']\n};\n\nexport function usersReducer(state = initialState, action) {\n    switch (action.type) {\n        case CHANGE_USER:\n            return Object.assign({}, state, {selectedId: action.payload});\n        case CHANGE_OPERATION:\n            return Object.assign({}, state, {selectedOperation: action.payload});\n        case GET_USERS_SUCCESS:\n        case INSERT_USER_SUCCESS:\n        case UPDATE_USER_SUCCESS:\n        case DELETE_USER_SUCCESS:\n            return Object.assign({}, state, {users: action.payload});\n        case INSERT_USER_FAILED:\n        case UPDATE_USER_FAILED:\n        case DELETE_USER_FAILED:\n        case GET_USERS_FAILED:\n            return Object.assign({}, state, {users: initialState.users});\n        default:\n            return state;\n    }\n}","export const OPERATION_SHOW_LIST = \"OPERATION_SHOW_LIST\";\nexport const OPERATION_INSERT_USER = \"OPERATION_INSERT_USER\";\nexport const OPERATION_UPDATE_USER = \"OPERATION_UPDATE_USER\";\nexport const OPERATION_DELETE_USER = \"OPERATION_DELETE_USER\";","import {\n    AUTH_WITH_TOKEN_FAILED,\n    AUTH_WITH_TOKEN_SUCCESS,\n    REFRESH_TOKEN_FAILED,\n    REFRESH_TOKEN_SUCCESS,\n    RESTORE_TOKEN,\n    CLEAR_TOKEN_DATA,\n    SIGN_OUT_TOKEN\n} from \"../constants/token\";\n\n\nconst initialState = {\n    accessToken: null,\n    refreshToken: null\n};\n\nexport function tokenReducer(state = initialState, action) {\n    switch (action.type) {\n        case RESTORE_TOKEN:\n        case REFRESH_TOKEN_SUCCESS:\n        case AUTH_WITH_TOKEN_SUCCESS:\n            return Object.assign({}, state, action.payload);\n        case REFRESH_TOKEN_FAILED:\n        case AUTH_WITH_TOKEN_FAILED:\n        case CLEAR_TOKEN_DATA:\n        case SIGN_OUT_TOKEN:\n            return Object.assign({}, initialState);\n        default:\n            return state;\n    }\n}","import {\n    FORM_CHANGE_EMAIL,\n    FORM_CHANGE_FIRST_NAME, FORM_CHANGE_LAST_NAME,\n    FORM_CHANGE_LOGIN,\n    FORM_CHANGE_PASSWORD, FORM_CHANGE_ROLE,\n    CLEAR_USER_DATA,\n} from \"../constants/users\";\n\nconst initialState = {\n    login: \"\",\n    role: 0,\n    email: \"\",\n    firstName: \"\",\n    lastName: \"\",\n};\n\nexport function userFormReducer(state = initialState, action) {\n    switch (action.type) {\n        case FORM_CHANGE_LOGIN:\n        case FORM_CHANGE_PASSWORD:\n        case FORM_CHANGE_FIRST_NAME:\n        case FORM_CHANGE_LAST_NAME:\n        case FORM_CHANGE_EMAIL:\n        case FORM_CHANGE_ROLE:\n            return Object.assign({}, state, action.payload);\n        case CLEAR_USER_DATA:\n            return Object.assign({}, initialState);\n        default:\n            return state;\n    }\n}","import {combineReducers} from \"redux\";\nimport {userReducer} from \"./userReducer\";\nimport {usersReducer} from \"./usersReducer\";\nimport {tokenReducer} from \"./tokenReducer\";\nimport {userFormReducer} from \"./userFormReducer\";\n\n\nexport const rootReducer = combineReducers({\n    user: userReducer,\n    token: tokenReducer,\n    userList: usersReducer,\n    userFormsData:userFormReducer\n});\n","import {createStore, applyMiddleware} from 'redux'\nimport {rootReducer} from \"../reducers/rootReducer\";\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk, logger));\n\n\n\n\n","import React from 'react';\nimport {NavLink} from \"react-router-dom\";\n\nclass NavBarLink extends React.Component {\n\n\n    render() {\n        return (\n            <NavLink\n                exact={this.props.exact}\n                className={\"nav__link\"}\n                activeClassName={\"nav__link__active\"}\n                to={this.props.link}\n            >\n                {this.props.name}\n            </NavLink>\n        );\n    }\n}\n\n\nexport default NavBarLink;","import React from 'react';\nimport NavBarLink from \"./NavBarLink\";\n\nclass NavBar extends React.Component{\n\n    render() {\n        return(\n            <nav className={'nav-bar'}>\n                <div className={'nav-bar__container'}>\n                <NavBarLink exact={true} link={\"/\"} name={\"Home page\"}/>\n                <NavBarLink link={\"/login\"} name={\"Login\"}/>\n                <NavBarLink link={\"/authenticated\"} name={\"Authenticated\"}/>\n                <NavBarLink link={\"/users\"} name={\"User list\"}/>\n                </div>\n            </nav>\n        );\n    }\n}\n\nexport default NavBar;","import React from 'react';\n\nclass Header extends React.Component{\n    render() {\n        return(\n            <div className={'header'}>\n                <img src=\"/react-gif.gif\" alt=\"\"/>\n            </div>\n        );\n    }\n}\n\nexport default Header;","import React from 'react';\n\nclass Footer extends React.Component{\n    render() {\n        return(\n            <footer className={'footer'}>\n                <div className=\"footer--logo\">\n                    <img src=\"/logo192.png\" alt=\"\"/>\n                </div>\n                <div className=\"footer--content\">\n                    <p>&#169; design by Infernet</p>\n                </div>\n            </footer>\n        );\n    }\n}\n\nexport default Footer;","import React from 'react';\nimport InputLogin from \"../views/components/Authenticated/InputLogin\";\nimport InputPassword from \"../views/components/Authenticated/InputPassword\";\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {changeLogin, changePassword, signIn} from \"../actions/loginAuthActions\";\nimport NavBar from \"../views/components/NavBar/NavBar\";\nimport Header from \"../views/components/Header/Header\";\nimport Footer from \"../views/components/Footer/Footer\";\n\nclass Authorization extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        this.props.signIn({\n            login: this.props.login,\n            password: this.props.password\n        });\n\n    }\n\n    render() {\n        const {setLogin, setPassword, login, password} = this.props;\n        return (\n            <div>\n                <Header/>\n                <NavBar/>\n                <div className=\"authorization-body\">\n                    <div className=\"authorization__title\">\n                        <h3>Login Page</h3>\n                    </div>\n                    <div className=\"authorization__content\">\n                        <form className={'authorization__content--form'} onSubmit={this.handleSubmit}>\n\n                            <InputLogin login={login} setValue={setLogin} class={'Login'}/>\n                            <InputPassword password={password} class={'Password'} setValue={setPassword}/>\n                            <button type=\"submit\">sign in</button>\n                        </form>\n                    </div>\n                </div>\n                <Footer/>\n            </div>\n        );\n    }\n}\n\n\nAuthorization.propsTypes = {\n    login: PropTypes.string.isRequired,\n    password: PropTypes.string.isRequired,\n    setLogin: PropTypes.func.isRequired,\n    setPassword: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = store => {\n    return {\n        login: store.user.login,\n        password: store.user.password\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        setLogin: login => dispatch(changeLogin(login)),\n        setPassword: password => dispatch(changePassword(password)),\n        signIn: data => dispatch(signIn(data))\n    }\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Authorization);\n","import {\n    CHANGE_LOGIN,\n    CHANGE_PASSWORD,\n    SIGN_IN_FAILED,\n    SIGN_IN_SUCCESS,\n    SIGN_OUT\n} from \"../constants/authorization\";\nimport {\n    AUTH_WITH_TOKEN_SUCCESS,\n    SIGN_OUT_TOKEN\n} from \"../constants/token\";\nimport axios from \"axios\";\nimport Fingerprint2 from \"fingerprintjs2\";\nimport {store} from \"../store/configureStore\";\n\nexport function changeLogin(login) {\n    return {\n        type: CHANGE_LOGIN,\n        payload: login\n    }\n}\n\nexport function changePassword(password) {\n    return {\n        type: CHANGE_PASSWORD,\n        payload: password\n    }\n}\n\nexport function signIn() {\n    return dispatch => {\n        const authStore = store.getState().user;\n        Fingerprint2.getV18(((fingerPrint => {\n            axios.post('/request/login/login-auth', {\n                login: authStore.login,\n                password: authStore.password,\n                fingerPrint: fingerPrint\n            })\n                .then(response => {\n                    localStorage.setItem('accessToken', response.data.accessToken);\n                    localStorage.setItem('refreshToken', response.data.refreshToken);\n                    dispatch({type: SIGN_IN_SUCCESS, payload: response.data.user});\n                    dispatch({type: AUTH_WITH_TOKEN_SUCCESS, payload: response.data.token});\n                })\n                .catch(reason => dispatch({type: SIGN_IN_FAILED}));\n        })));\n    }\n}\n\nexport function signOut() {\n    return dispatch => {\n        const tokenStore = store.getState().tokenAuth;\n        Fingerprint2.getV18(fingerPrint => {\n            axios.post('/request/login/sign-out', {fingerPrint: fingerPrint},\n                {headers: {'authorization': 'Bearer ' + tokenStore.refreshToken}})\n                .finally(() => {\n                    localStorage.removeItem('accessToken');\n                    localStorage.removeItem('refreshToken');\n                    dispatch({type: SIGN_OUT});\n                    dispatch({type: SIGN_OUT_TOKEN});\n                })\n        })\n    }\n}\n","import React from 'react';\n\nclass ContentCart extends React.Component {\n\n\n    render() {\n        return (\n            <div className={this.props.class.container}>\n                <p className={this.props.class.title}>{this.props.title}</p>\n                <p className={this.props.class.content}>{this.props.content}</p>\n            </div>\n        );\n    }\n}\n\nexport default ContentCart;","import React from 'react';\nimport {connect} from 'react-redux';\nimport NavBar from \"../views/components/NavBar/NavBar\";\nimport ContentCart from \"../views/components/Home/ContentCart\";\nimport Footer from \"../views/components/Footer/Footer\";\nimport Header from \"../views/components/Header/Header\";\n\n\nclass Home extends React.Component {\n\n    render() {\n        const {store} = this.props;\n        let classNames = {\n            container: \"home__content--container\",\n            title: \"home__content--title\",\n            content: \"home__content--content\"\n        };\n        return (\n            <div>\n                <Header/>\n                <NavBar/>\n                <div className={'home-body'}>\n                    <div className={'home__title'}>\n                        <h3>Home page</h3>\n                    </div>\n                    <div className={'home__content'}>\n                        {\n                            (store.token.accessToken !== null) ?\n                                Object.keys(store.user).map(e => {\n                                    if (e !== 'token' && store.user[e] !== '')\n                                        return <ContentCart\n                                            key={e}\n                                            class={classNames}\n                                            title={e + ':'}\n                                            content={store.user[e]}\n                                        />;\n                                })\n                                :\n                                <ContentCart\n                                    class={classNames}\n                                    title={'Ошибка:'}\n                                    content={'Вы не авторизованы'}\n                                />\n                        }\n                    </div>\n                </div>\n                <Footer/>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = store => {\n    return {\n        store: store\n    }\n};\nexport default connect(mapStateToProps)(Home);","import React from 'react';\nimport {connect} from 'react-redux';\nimport {signOut} from \"../actions/loginAuthActions\";\nimport NavBar from \"../views/components/NavBar/NavBar\";\nimport Header from \"../views/components/Header/Header\";\nimport Footer from \"../views/components/Footer/Footer\";\n\n\nclass Authenticated extends React.Component {\n    render() {\n        const {store} = this.props;\n        return (\n            <div>\n                <Header/>\n                <NavBar/>\n                <div className=\"authenticated-body\">\n                    <div className=\"authenticated--title\">\n                        <h3>Authenticated page</h3>\n                    </div>\n                    <ul className={\"authenticated--content\"}>\n                        {\n                            Object.keys(store.user).map(e => {\n                                if (e !== 'token')\n                                    return <li key={e}>{e}: {store.user[e]}</li>;\n                                else\n                                    return false;\n                            })\n                        }\n                    </ul>\n                    <button className={\"authenticated--button\"} onClick={this.props.signOut}>Log out</button>\n                </div>\n                <Footer/>\n            </div>\n        );\n    }\n}\n\n\nconst mapStateToProps = store => {\n    return {\n        store: store\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        signOut: () => dispatch(signOut())\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Authenticated);\n","import {\n    AUTH_WITH_TOKEN_FAILED,\n    AUTH_WITH_TOKEN_SUCCESS,\n    REFRESH_TOKEN_FAILED,\n    REFRESH_TOKEN_SUCCESS,\n    RESTORE_TOKEN,\n    SIGN_OUT_TOKEN\n} from \"../constants/token\";\nimport axios from \"axios\";\nimport {store} from \"../store/configureStore\";\nimport {SIGN_IN_SUCCESS, SIGN_OUT} from \"../constants/authorization\";\nimport Fingerprint2 from 'fingerprintjs2';\n\nexport function tokenAuth() {\n    return dispatch => {\n        const tokenStore = store.getState().token;\n        Fingerprint2.getV18(fingerPrint => {\n            axios.post('/request/login/token-auth', {fingerPrint: fingerPrint},\n                {headers: {'authorization': 'Bearer ' + tokenStore.accessToken},})\n                .then(response => {\n                    if (response.status !== 200) throw new Error();\n                    dispatch({type: AUTH_WITH_TOKEN_SUCCESS});\n                    dispatch({type: SIGN_IN_SUCCESS, payload: response.data.user});\n                })\n                .catch(reason => {\n                    if (reason.request.status === 401 && tokenStore.refreshToken !== null)\n                        dispatch(refreshAccessToken(tokenAuth));\n                    else {\n                        localStorage.removeItem('accessToken');\n                        localStorage.removeItem('refreshToken');\n                        dispatch({type: AUTH_WITH_TOKEN_FAILED});\n                        dispatch({type: SIGN_OUT});\n                    }\n                });\n        });\n    }\n}\n\nexport function refreshAccessToken(action) {\n    return dispatch => {\n        const tokenStore = store.getState().token;\n        Fingerprint2.getV18(fingerPrint => {\n            axios.post('/request/login/refresh-token', {fingerPrint: fingerPrint},\n                {\n                    headers: {'authorization': 'Bearer ' + tokenStore.refreshToken}\n                })\n                .then(response => {\n                    localStorage.setItem('accessToken', response.data.accessToken);\n                    localStorage.setItem('refreshToken', response.data.refreshToken);\n                    dispatch({type: REFRESH_TOKEN_SUCCESS, payload: response.data});\n                    dispatch(action());\n                })\n                .catch(reason => {\n                    localStorage.removeItem('accessToken');\n                    localStorage.removeItem('refreshToken');\n                    dispatch({type: REFRESH_TOKEN_FAILED});\n                    dispatch({type: SIGN_OUT});\n                })\n        })\n    }\n}\n\nexport function restoreToken() {\n    return dispatch => {\n        let accessToken = localStorage.getItem('accessToken');\n        let refreshToken = localStorage.getItem('refreshToken');\n        if (accessToken !== null && refreshToken !== null) {\n            dispatch({\n                type: RESTORE_TOKEN,\n                payload: {accessToken: accessToken, refreshToken: refreshToken}\n            });\n            dispatch(tokenAuth());\n        } else {\n            localStorage.removeItem('accessToken');\n            localStorage.removeItem('refreshToken');\n            dispatch({type: SIGN_OUT});\n            dispatch({type: SIGN_OUT_TOKEN});\n        }\n    }\n}","import {\n    DELETE_USER_FAILED,\n    DELETE_USER_SUCCESS,\n    INSERT_USER_FAILED,\n    INSERT_USER_SUCCESS,\n    GET_USERS_FAILED,\n    GET_USERS_SUCCESS,\n    UPDATE_USER_FAILED,\n    UPDATE_USER_SUCCESS,\n    CHANGE_USER,\n    CLEAR_USER_DATA,\n    CHANGE_OPERATION\n} from \"../constants/users\";\nimport axios from \"axios\";\nimport {store} from \"../store/configureStore\";\nimport {refreshAccessToken} from \"./tokenAuthActions\";\n\nexport function changeUser(id) {\n    return ({\n        type: CHANGE_USER,\n        payload: id\n    });\n}\n\nexport function changeOperation(operation) {\n    return {type: CHANGE_OPERATION, payload: operation}\n}\nexport function getUsers() {\n    return dispatch => {\n        const token = store.getState().token.accessToken;\n        axios.post('/request/user/get', {}, {headers: {'authorization': 'Bearer ' + token}})\n            .then(response => dispatch({type: GET_USERS_SUCCESS, payload: response.data.users}))\n            .catch(reason => {\n                if (reason.request.status === 401)\n                    dispatch(refreshAccessToken(getUsers));\n                else\n                    dispatch({type: GET_USERS_FAILED});\n            })\n    }\n}\n\n\nexport function insertUser() {\n    return dispatch => {\n        const token = store.getState().token.accessToken;\n        const userDataStore=store.getState().userFormsData;\n        axios.post('/request/user/insert',\n            {user: userDataStore},\n            {headers: {'authorization': 'Bearer ' + token}}\n        )\n            .then(response => {\n                dispatch({type: INSERT_USER_SUCCESS, payload: response.data.users});\n                dispatch({type: CLEAR_USER_DATA});\n            })\n            .catch(reason => {\n                if (reason.request.status === 401)\n                    dispatch(refreshAccessToken(insertUser));\n                else\n                    dispatch({type: INSERT_USER_FAILED});\n            })\n    }\n}\n\nexport function updateUser() {\n    return dispatch => {\n        const token = store.getState().token.accessToken;\n        const usersStore = store.getState().users;\n        axios.post('/request/user/update',\n            {user: usersStore.user},\n            {headers: {'authorization': 'Bearer ' + token}}\n        )\n            .then(response => {\n                dispatch({type: UPDATE_USER_SUCCESS, payload: response.data.users});\n                dispatch({type: CLEAR_USER_DATA});\n                dispatch(changeUser(null));\n            })\n            .catch(reason => {\n                if (reason.request.status === 401)\n                    dispatch(refreshAccessToken(updateUser));\n                else\n                    dispatch({type: UPDATE_USER_FAILED});\n            })\n    }\n}\n\nexport function deleteUser() {\n    return dispatch => {\n        const token = store.getState().token.accessToken;\n        const usersStore = store.getState().users;\n        axios.post('/request/user/delete',\n            {id: usersStore.selectedId},\n            {headers: {'authorization': 'Bearer ' + token}}\n        )\n            .then(response => {\n                dispatch({type: DELETE_USER_SUCCESS, payload: response.data.users});\n                dispatch(changeUser(null));\n            })\n            .catch(reason => {\n                if (reason.request.status === 401)\n                    dispatch(refreshAccessToken(deleteUser));\n                else\n                    dispatch({type: DELETE_USER_FAILED});\n            })\n    }\n}\n","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {changeOperation, deleteUser, insertUser, updateUser} from \"../../../actions/usersActions\";\nimport {\n    OPERATION_DELETE_USER,\n    OPERATION_INSERT_USER, OPERATION_SHOW_LIST,\n    OPERATION_UPDATE_USER\n} from \"../../../constants/userOperationType\";\n\n\nclass ControlPanel extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.onInsertUser = this.onInsertUser.bind(this);\n        this.onUpdateUser = this.onUpdateUser.bind(this);\n        this.onDeleteUser = this.onDeleteUser.bind(this);\n        this.onShowUsers = this.onShowUsers.bind(this);\n    }\n\n    onInsertUser(e) {\n        e.preventDefault();\n        this.props.selectOperation(OPERATION_INSERT_USER);\n    }\n\n    onUpdateUser(e) {\n        e.preventDefault();\n        this.props.selectOperation(OPERATION_UPDATE_USER);\n    }\n\n    onDeleteUser(e) {\n        e.preventDefault();\n        this.props.selectOperation(OPERATION_DELETE_USER);\n    }\n\n    onShowUsers(e) {\n        e.preventDefault();\n        this.props.selectOperation(OPERATION_SHOW_LIST);\n    }\n\n    render() {\n        return (\n            <div className=\"users__control-panel--container\">\n                <button className={\"users__control-panel--btn\"} onClick={this.onShowUsers}>Список пользователей</button>\n                <button className=\"users__control-panel--btn\" onClick={this.onInsertUser}>Добавить</button>\n                <button className=\"users__control-panel--btn\" onClick={this.onUpdateUser}>Изменить</button>\n                <button className=\"users__control-panel--btn\" onClick={this.onDeleteUser}>Удалить</button>\n            </div>\n        );\n    }\n}\n\nControlPanel.propsTypes = {\n    store: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = store => {\n    return {\n        store: store.userList\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        selectOperation: operation => dispatch(changeOperation(operation))\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ControlPanel);","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport {NavLink} from \"react-router-dom\";\n\n\nclass User extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.onSelect=this.onSelect.bind(this);\n    }\n\n    onSelect(e){\n        e.preventDefault();\n        this.props.select(this.props.user.id);\n    }\n\n\n    render() {\n        const user = this.props.user;\n        return (\n            <NavLink to={''} onClick={this.onSelect} className=\"users__list--item-container\" activeClassName={'users__list--item--container__active'}>\n                {\n                    Object.keys(user).map(e => {\n                        return <p className=\"users__list--item-content\" key={e}>{user[e]}</p>\n                    })\n                }\n            </NavLink>\n        );\n    }\n}\n\nUser.propsTypes = {\n    user: PropTypes.object.isRequired,\n    select: PropTypes.func.isRequired\n};\n\n\nexport default User;","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {\n    changeEmail,\n    changeFirstName,\n    changeLastName,\n    changeLogin,\n    changePassword, changeRole\n} from \"../../../actions/userFormHandlerActions\";\nimport {insertUser} from \"../../../actions/usersActions\";\n\n\nclass InsertUserForm extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.changeLogin = this.changeLogin.bind(this);\n        this.changePassword = this.changePassword.bind(this);\n        this.changeFirstName = this.changeFirstName.bind(this);\n        this.changeLastName = this.changeLastName.bind(this);\n        this.changeEmail = this.changeEmail.bind(this);\n        this.changeRadio = this.changeRadio.bind(this);\n        this.handlerForm = this.handlerForm.bind(this);\n    }\n\n    changeLogin(e) {\n        this.props.changeLogin(e.target.value);\n    }\n\n    changePassword(e) {\n        this.props.changePassword(e.target.value);\n    }\n\n    changeFirstName(e) {\n        this.props.changeFirstName(e.target.value);\n    }\n\n    changeLastName(e) {\n        this.props.changeLastName(e.target.value);\n    }\n\n    changeEmail(e) {\n        this.props.changeEmail(e.target.value);\n    }\n\n    changeRadio(e) {\n        this.props.changeRadio(+e.target.value);\n    }\n\n    handlerForm(e) {\n        e.preventDefault();\n        this.props.insertUser();\n    }\n\n    render() {\n        return (\n            <form className=\"users_form_insert\" onSubmit={this.handlerForm}>\n                <div className=\"users_form--group\">\n                    <label htmlFor={'login'}>Login</label>\n                    <input id={'login'} name={'login'} type=\"text\" required\n                           onChange={this.changeLogin}/>\n                </div>\n                <div className=\"users_form--group\">\n                    <label htmlFor={'password'}>Password</label>\n                    <input id={'password'} name={'password'} type=\"password\" required\n                           onChange={this.changePassword}/>\n                </div>\n                <div className=\"users_form--group\">\n                    <label htmlFor={'firstName'}>First name</label>\n                    <input id={'firstName'} name={'firstName'} type=\"text\" required\n                           onChange={this.changeFirstName}/>\n                </div>\n                <div className=\"users_form--group\">\n                    <label htmlFor={'lastName'}>Last name</label>\n                    <input id={'lastName'} name={'lastName'} type=\"text\"\n                           onChange={this.changeLastName}/>\n                </div>\n                <div className=\"users_form--group\">\n                    <label htmlFor={'email'}>Email</label>\n                    <input id={'email'} name={'email'} type=\"email\" required\n                           onChange={this.changeEmail}/>\n                </div>\n                <div className=\"users_form--group\">\n                    <div className=\"users_form--radio--group\">\n                        <label htmlFor=\"user_role\">User</label>\n                        <input type=\"radio\" id={\"user_role\"} name={'role'} className=\"users_form--radio-role\" value={'0'}\n                               defaultChecked\n                               onChange={this.changeRadio}/>\n                    </div>\n                    <div className=\"users_form--radio--group\">\n                        <label htmlFor=\"admin_role\">Admin</label>\n                        <input type=\"radio\" id={\"admin_role\"} name={'role'} className=\"users_form--radio-role\" value={'1'}\n                               onChange={this.changeRadio}/>\n                    </div>\n                </div>\n                <button type={'submit'}>create user</button>\n            </form>\n        );\n    }\n}\n\nInsertUserForm.propsTypes = {\n    user: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = store => {\n    return {\n        user: store.userFormsData\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        insertUser: () => dispatch(insertUser()),\n        changeLogin: login => dispatch(changeLogin(login)),\n        changePassword: password => dispatch(changePassword(password)),\n        changeFirstName: firstName => dispatch(changeFirstName(firstName)),\n        changeLastName: lastName => dispatch(changeLastName(lastName)),\n        changeEmail: email => dispatch(changeEmail(email)),\n        changeRadio: role => dispatch(changeRole(role))\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InsertUserForm);","import {\n    FORM_CHANGE_LOGIN,\n    FORM_CHANGE_PASSWORD,\n    FORM_CHANGE_FIRST_NAME,\n    FORM_CHANGE_LAST_NAME,\n    FORM_CHANGE_EMAIL,\n    FORM_CHANGE_ROLE\n} from \"../constants/users\";\n\nexport function changeLogin(login) {\n    return {type: FORM_CHANGE_LOGIN, payload: {login: login}}\n}\n\nexport function changePassword(password) {\n    return {type: FORM_CHANGE_PASSWORD, payload: {password: password}}\n}\n\nexport function changeFirstName(firstName) {\n    return {type: FORM_CHANGE_FIRST_NAME, payload: {firstName: firstName}}\n}\n\nexport function changeLastName(lastName) {\n    return {type: FORM_CHANGE_LAST_NAME, payload: {lastName: lastName}}\n}\n\nexport function changeEmail(email) {\n    return {type: FORM_CHANGE_EMAIL, payload: {email: email}}\n}\n\nexport function changeRole(role) {\n    return {type: FORM_CHANGE_ROLE, payload: {role: role}}\n}","import React from 'react';\nimport {connect} from 'react-redux';\nimport NavBar from \"../views/components/NavBar/NavBar\";\nimport Header from \"../views/components/Header/Header\";\nimport Footer from \"../views/components/Footer/Footer\";\nimport ControlPanel from \"../views/components/Users/ControlPanel\";\nimport PropTypes from 'prop-types';\nimport {changeUser, getUsers} from \"../actions/usersActions\";\nimport User from \"../views/components/Users/User\";\nimport {\n    OPERATION_DELETE_USER,\n    OPERATION_INSERT_USER,\n    OPERATION_SHOW_LIST,\n    OPERATION_UPDATE_USER\n} from \"../constants/userOperationType\";\nimport InsertUserForm from \"../views/components/Users/InsertUserForm\";\n\n\nclass UsersList extends React.Component {\n    componentDidMount() {\n        this.props.getUsers();\n    }\n\n    render() {\n        const store = this.props.store;\n        const users = this.props.store.users;\n        switch (store.selectedOperation) {\n            case OPERATION_SHOW_LIST:\n                return (\n                    <div>\n                        <Header/>\n                        <NavBar/>\n                        <ControlPanel/>\n                        <div className=\"users-body\">\n                            <div className=\"users__list-header\">\n                                {\n                                    store.userData.map(e => {\n                                        return <p className=\"users__list-header--title\" key={e}>{e}</p>\n                                    })\n                                }\n                            </div>\n                            {\n                                users.map(e => {\n                                    return <User user={e} key={e.id} select={this.props.selectUser}/>\n                                })\n                            }\n                        </div>\n                        <Footer/>\n                    </div>\n                );\n            case OPERATION_INSERT_USER:\n                return (\n                    <div>\n                        <Header/>\n                        <NavBar/>\n                        <ControlPanel/>\n                        <InsertUserForm/>\n                        <Footer/>\n                    </div>\n                );\n            case OPERATION_UPDATE_USER:\n                return (\n                    <div>\n                        <Header/>\n                        <NavBar/>\n                        <ControlPanel/>\n                        <div>\n                            <p>\n                                UPDATE\n                            </p>\n                        </div>\n                        <Footer/>\n                    </div>\n                );\n            case OPERATION_DELETE_USER :\n                return (\n                    <div>\n                        <Header/>\n                        <NavBar/>\n                        <ControlPanel/>\n                        <div>\n                            <p>\n                                DELETE\n                            </p>\n                        </div>\n                        <Footer/>\n                    </div>\n                );\n            default:\n                return (\n                    <div>\n                        <Header/>\n                        <NavBar/>\n                        <div style={{height: '100%', width: '100%', display: 'flex'}}>\n                            <h1 style={{color: \"black\", margin: \"auto\"}}>EMPTY RESULT</h1>\n                        </div>\n                        <Footer/>\n                    </div>\n                );\n        }\n    }\n}\n\nUsersList.propTypes = {\n    store: PropTypes.object.isRequired,\n    selectUser: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = store => {\n    return {\n        store: store.userList\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        getUsers: () => dispatch(getUsers()),\n        selectUser: id => dispatch(changeUser(id)),\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersList);","import {Redirect, Route, Switch} from 'react-router-dom';\nimport React from \"react\";\nimport {connect} from \"react-redux\";\nimport Authorization from \"../containers/Authorization\";\nimport Home from \"../containers/Home\";\nimport Authenticated from \"../containers/Authenticated\";\nimport PropTypes from 'prop-types';\nimport UserList from \"../containers/UsersList\";\n\n\nclass Routes extends React.Component {\n    render() {\n        const accessToken = this.props.token.accessToken;\n        return (\n            <Switch>\n                <Route path={\"/\"} exact component={Home}/>\n                {\n                    (accessToken !== null) ?\n                        <Redirect from={\"/login\"} to={\"/authenticated\"}/> :\n                        <Redirect from={\"/authenticated\"} to={\"/login\"}/>\n                }\n                {\n                    accessToken === null &&\n                    <Redirect from={\"/users\"} to={\"/login\"}/>\n                }\n                <Route path={\"/login\"} component={Authorization}/>\n                <Route path={\"/authenticated\"} component={Authenticated}/>\n                <Route path={\"/users\"} component={UserList}/>\n            </Switch>\n        );\n    }\n}\n\nRoutes.propTypes = {\n    token: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = store => {\n    return {\n        token: store.token\n    }\n};\n\nexport default connect(mapStateToProps)(Routes);","import React from 'react';\nimport {connect} from 'react-redux';\nimport {BrowserRouter} from \"react-router-dom\";\nimport Routes from \"../routes\";\nimport PropTypes from \"prop-types\";\nimport {restoreToken} from \"../actions/tokenAuthActions\";\n\n\nclass App extends React.Component {\n    componentDidMount() {\n        const token=this.props.token;\n        if (token.accessToken === null && token.refreshToken === null)\n            this.props.restoreToken();\n    }\n\n    render() {\n        return (\n            <BrowserRouter>\n                <Routes/>\n            </BrowserRouter>\n        );\n    }\n}\n\nApp.propsTypes = {\n    user: PropTypes.object.isRequired\n};\nconst mapStateToProps = store => {\n    return {\n        user: store.user,\n        token: store.token\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        restoreToken: () => dispatch(restoreToken())\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sass/index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./containers/App\";\nimport {store} from \"./store/configureStore\";\nimport {Provider} from \"react-redux\";\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n//\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
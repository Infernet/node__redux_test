{"version":3,"sources":["serviceWorker.js","views/components/Authenticated/InputLogin.jsx","views/components/Authenticated/InputPassword.jsx","constants/authorization.js","constants/token.js","reducers/userReducer.js","constants/users.js","constants/userOperationType.js","reducers/userListReducer.js","reducers/tokenReducer.js","reducers/userFormReducer.js","reducers/rootReducer.js","store/configureStore.js","views/components/NavBar/NavBarLink.jsx","views/components/NavBar/NavBar.jsx","views/components/Header/Header.jsx","views/components/Footer/Footer.jsx","containers/Authorization.jsx","actions/loginAuthActions.js","views/components/Home/ContentCart.jsx","containers/Home.jsx","containers/Authenticated.jsx","actions/tokenAuthActions.js","actions/usersActions.js","views/components/Users/ControlPanel.jsx","views/components/Users/User.jsx","views/components/Users/InsertUserForm.jsx","actions/userFormHandlerActions.js","views/components/Users/DeleteUserForm.jsx","containers/UsersList.jsx","routes/index.jsx","containers/App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","InputLogin","props","onChange","bind","e","this","setValue","target","value","className","class","htmlFor","type","id","name","placeholder","login","autoComplete","React","Component","InputPassword","password","CHANGE_LOGIN","CHANGE_PASSWORD","SIGN_IN_SUCCESS","SIGN_IN_REQUEST","SIGN_IN_FAILED","SIGN_OUT","SIGN_OUT_TOKEN","RESTORE_TOKEN","CLEAR_TOKEN_DATA","AUTH_WITH_TOKEN_SUCCESS","AUTH_WITH_TOKEN_FAILED","REFRESH_TOKEN_SUCCESS","REFRESH_TOKEN_FAILED","initialState","role","CLEAR_USER_DATA","GET_USERS_SUCCESS","GET_USERS_FAILED","CHANGE_USER","INSERT_USER_SUCCESS","INSERT_USER_FAILED","UPDATE_USER_SUCCESS","UPDATE_USER_FAILED","DELETE_USER_SUCCESS","DELETE_USER_FAILED","CHANGE_OPERATION","FORM_CHANGE_LOGIN","FORM_CHANGE_PASSWORD","FORM_CHANGE_FIRST_NAME","FORM_CHANGE_LAST_NAME","FORM_CHANGE_EMAIL","FORM_CHANGE_ROLE","CHANGE_USER_DATA","OPERATION_SHOW_LIST","selectedId","selectedOperation","users","userData","accessToken","refreshToken","email","firstName","lastName","rootReducer","combineReducers","user","state","action","Object","assign","payload","token","userList","userFormsData","history","createBrowserHistory","store","listen","console","log","pathname","createStore","applyMiddleware","thunk","logger","NavBarLink","exact","activeClassName","to","link","NavBar","Header","src","alt","Footer","Authorization","handleSubmit","preventDefault","signIn","setLogin","setPassword","title","onSubmit","propsTypes","PropTypes","string","isRequired","func","connect","dispatch","changeLogin","changePassword","data","authStore","getState","Fingerprint2","getV18","fingerPrint","axios","post","then","response","localStorage","setItem","tokens","catch","reason","ContentCart","container","content","Home","classNames","keys","map","key","Authenticated","onClick","signOut","tokenStore","tokenAuth","headers","finally","removeItem","status","Error","request","refreshAccessToken","changeUser","changeOperation","operation","getUsers","insertUser","userDataStore","push","updateUser","usersStore","userId","deleteUser","ControlPanel","onInsertUser","onUpdateUser","onDeleteUser","onShowUsers","selectOperation","object","User","onSelect","select","InsertUserForm","changeFirstName","changeLastName","changeEmail","changeRadio","handlerForm","clearData","loadData","required","checked","listStore","find","elem","changeRole","deleteAccept","deleteDeny","clearUser","UsersList","selectUser","DeleteUserForm","style","height","width","display","color","margin","Routes","fallback","path","component","from","UserList","App","restoreToken","getItem","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c8119b76.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types'\n\nclass InputLogin extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(e) {\n        this.props.setValue(e.target.value);\n    }\n\n    render() {\n        return (\n            <div className={'block'+this.props.class}>\n                <label htmlFor=\"login\" className={'label'+this.props.class}>Login</label>\n                <input type=\"text\"\n                       id={\"login\"}\n                       name={\"login\"}\n                       className={'input'+this.props.class}\n                       onChange={this.onChange}\n                       placeholder={this.props.login}\n                       autoComplete={'false'}\n                />\n            </div>\n        );\n    }\n\n}\n\nInputLogin.propTypes = {\n    login: PropTypes.string,\n    class: PropTypes.string.isRequired\n};\n\nexport default InputLogin;","import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nclass InputPassword extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(e) {\n        this.props.setValue(e.target.value);\n    }\n\n    render() {\n        return (\n            <div className={'block'+this.props.class}>\n                <label htmlFor=\"password\" className={'label'+this.props.class}>Password</label>\n                <input type=\"password\"\n                       id={\"password\"}\n                       name={\"password\"}\n                       className={'input'+this.props.class}\n                       onChange={this.onChange}\n                       placeholder={this.props.password}\n                       autoComplete={'false'}\n                />\n            </div>\n        );\n    }\n\n}\n\nInputPassword.propTypes = {\n    password: PropTypes.string,\n    class:PropTypes.string.isRequired\n};\n\nexport default InputPassword;","export const CHANGE_LOGIN = \"CHANGE_LOGIN\";\nexport const CHANGE_PASSWORD = \"CHANGE_PASSWORD\";\nexport const SIGN_IN_SUCCESS = \"SIGN_IN_SUCCESS\";\nexport const SIGN_IN_REQUEST = \"SIGN_IN_REQUEST\";\nexport const SIGN_IN_FAILED = \"SIGN_IN_FAILED\";\nexport const SIGN_OUT = \"SIGN_OUT\";\nexport const TEST=\"TEST\";","//sign out\nexport const SIGN_OUT_TOKEN = \"SIGN_OUT_TOKEN\";\n//restore token\nexport const RESTORE_TOKEN = \"RESTORE_TOKEN\";\nexport const CLEAR_TOKEN_DATA=\"CLEAR_TOKEN_DATA\";\n//auth with access token\nexport const AUTH_WITH_TOKEN_REQUEST = \"AUTH_WITH_TOKEN_REQUEST\";\nexport const AUTH_WITH_TOKEN_SUCCESS = \"AUTH_WITH_TOKEN_SUCCESS\";\nexport const AUTH_WITH_TOKEN_FAILED = \"AUTH_WITH_TOKEN_FAILED\";\n//try to get Access Token\nexport const REFRESH_TOKEN_REQUEST = \"REFRESH_TOKEN_REQUEST\";\nexport const REFRESH_TOKEN_SUCCESS = \"REFRESH_TOKEN_SUCCESS\";\nexport const REFRESH_TOKEN_FAILED = \"REFRESH_TOKEN_FAILED\";","import {\n    CHANGE_LOGIN,\n    CHANGE_PASSWORD,\n    SIGN_IN_FAILED,\n    SIGN_IN_REQUEST,\n    SIGN_IN_SUCCESS,\n    SIGN_OUT,\n} from \"../constants/authorization\";\n\nconst initialState = {\n    id: null,\n    role:0,\n    login: \"\",\n    password: \"\"\n};\n\nexport function userReducer(state = initialState, action) {\n    switch (action.type) {\n        case CHANGE_LOGIN:\n            return Object.assign({}, state, {login: action.payload});\n        case CHANGE_PASSWORD:\n            return Object.assign({}, state, {password: action.payload});\n        case SIGN_IN_REQUEST:\n            return state;\n        case SIGN_IN_SUCCESS:\n            return Object.assign({}, state, action.payload, {password: \"\"});\n        case SIGN_IN_FAILED:\n            return Object.assign({}, state, action.payload );\n        case SIGN_OUT:\n            return Object.assign({}, initialState);\n        default:\n            return state;\n    }\n}","export const CLEAR_USER_DATA = \"CLEAR_USER_DATA\";\nexport const GET_USERS_SUCCESS = \"GET_USERS_SUCCESS\";\nexport const GET_USERS_FAILED = \"GET_USERS_FAILED\";\nexport const CHANGE_USER = \"CHANGE_USER\";\nexport const INSERT_USER_SUCCESS = \"INSERT_USER_SUCCESS\";\nexport const INSERT_USER_FAILED = \"INSERT_USER_FAILED\";\nexport const UPDATE_USER_SUCCESS = \"UPDATE_USER_SUCCESS\";\nexport const UPDATE_USER_FAILED = \"UPDATE_USER_FAILED\";\nexport const DELETE_USER_SUCCESS = \"DELETE_USER_SUCCESS\";\nexport const DELETE_USER_FAILED = \"DELETE_USER_FAILED\";\nexport const CHANGE_OPERATION = \"CHANGE_OPERATION\";\nexport const FORM_CHANGE_LOGIN = \"FORM_CHANGE_LOGIN\";\nexport const FORM_CHANGE_PASSWORD = \"FORM_CHANGE_PASSWORD\";\nexport const FORM_CHANGE_FIRST_NAME = \"FORM_CHANGE_FIRST_NAME\";\nexport const FORM_CHANGE_LAST_NAME = \"FORM_CHANGE_LAST_NAME\";\nexport const FORM_CHANGE_EMAIL = \"FORM_CHANGE_EMAIL\";\nexport const FORM_CHANGE_ROLE = \"FORM_CHANGE_ROLE\";\nexport const CHANGE_USER_DATA = \"CHANGE_USER_DATA\";","export const OPERATION_SHOW_LIST = \"OPERATION_SHOW_LIST\";\nexport const OPERATION_INSERT_USER = \"OPERATION_INSERT_USER\";\nexport const OPERATION_UPDATE_USER = \"OPERATION_UPDATE_USER\";\nexport const OPERATION_DELETE_USER = \"OPERATION_DELETE_USER\";","import {\n    CHANGE_OPERATION,\n    CHANGE_USER,\n    DELETE_USER_FAILED,\n    DELETE_USER_SUCCESS,\n    GET_USERS_FAILED,\n    GET_USERS_SUCCESS,\n    INSERT_USER_FAILED,\n    INSERT_USER_SUCCESS,\n    UPDATE_USER_FAILED,\n    UPDATE_USER_SUCCESS\n} from \"../constants/users\";\nimport {OPERATION_SHOW_LIST} from \"../constants/userOperationType\";\n\nconst initialState = {\n    selectedId: null,\n    selectedOperation: OPERATION_SHOW_LIST,\n    users: [],\n    userData: ['id', 'login', 'role', 'email', 'first name', 'last name']\n};\n\nexport function userListReducer(state = initialState, action) {\n    switch (action.type) {\n        case CHANGE_USER:\n            return Object.assign({}, state, {selectedId: action.payload});\n        case CHANGE_OPERATION:\n            return Object.assign({}, state, {selectedOperation: action.payload});\n        case GET_USERS_SUCCESS:\n        case INSERT_USER_SUCCESS:\n        case UPDATE_USER_SUCCESS:\n        case DELETE_USER_SUCCESS:\n            return Object.assign({}, state, {users: action.payload});\n        case INSERT_USER_FAILED:\n        case UPDATE_USER_FAILED:\n        case DELETE_USER_FAILED:\n        case GET_USERS_FAILED:\n            return Object.assign({}, state, {users: initialState.users});\n        default:\n            return state;\n    }\n}","import {\n    AUTH_WITH_TOKEN_FAILED,\n    AUTH_WITH_TOKEN_SUCCESS,\n    REFRESH_TOKEN_FAILED,\n    REFRESH_TOKEN_SUCCESS,\n    RESTORE_TOKEN,\n    CLEAR_TOKEN_DATA,\n    SIGN_OUT_TOKEN\n} from \"../constants/token\";\n\n\nconst initialState = {\n    accessToken: null,\n    refreshToken: null\n};\n\nexport function tokenReducer(state = initialState, action) {\n    switch (action.type) {\n        case RESTORE_TOKEN:\n        case REFRESH_TOKEN_SUCCESS:\n        case AUTH_WITH_TOKEN_SUCCESS:\n            return Object.assign({}, state, action.payload);\n        case REFRESH_TOKEN_FAILED:\n        case AUTH_WITH_TOKEN_FAILED:\n        case CLEAR_TOKEN_DATA:\n        case SIGN_OUT_TOKEN:\n            return Object.assign({}, initialState);\n        default:\n            return state;\n    }\n}","import {\n    FORM_CHANGE_EMAIL,\n    FORM_CHANGE_FIRST_NAME,\n    FORM_CHANGE_LAST_NAME,\n    FORM_CHANGE_LOGIN,\n    FORM_CHANGE_PASSWORD,\n    FORM_CHANGE_ROLE,\n    CLEAR_USER_DATA,\n    CHANGE_USER_DATA,\n} from \"../constants/users\";\n\nconst initialState = {\n    login: \"\",\n    role: 0,\n    email: \"\",\n    firstName: \"\",\n    lastName: \"\",\n};\n\nexport function userFormReducer(state = initialState, action) {\n    switch (action.type) {\n        case CHANGE_USER_DATA:\n        case FORM_CHANGE_LOGIN:\n        case FORM_CHANGE_PASSWORD:\n        case FORM_CHANGE_FIRST_NAME:\n        case FORM_CHANGE_LAST_NAME:\n        case FORM_CHANGE_EMAIL:\n        case FORM_CHANGE_ROLE:\n            return Object.assign({}, state, action.payload);\n        case CLEAR_USER_DATA:\n            return Object.assign({}, initialState);\n        default:\n            return state;\n    }\n}","import {combineReducers} from \"redux\";\nimport {userReducer} from \"./userReducer\";\nimport {userListReducer} from \"./userListReducer\";\nimport {tokenReducer} from \"./tokenReducer\";\nimport {userFormReducer} from \"./userFormReducer\";\n\n\nexport const rootReducer = combineReducers({\n    user: userReducer,\n    token: tokenReducer,\n    userList: userListReducer,\n    userFormsData:userFormReducer\n});\n","import {createStore, applyMiddleware} from 'redux'\nimport {rootReducer} from \"../reducers/rootReducer\";\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport {createBrowserHistory} from 'history';\n\nconst history=createBrowserHistory();\nconst location=history.location;\n\nconst unlisten = history.listen((location, action) => {\n    // location is an object like window.location\n    console.log(action, location.pathname, location.state);\n});\n\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk, logger));\n\n\n\n\n","import React from 'react';\nimport {NavLink} from \"react-router-dom\";\n\nclass NavBarLink extends React.Component {\n\n\n    render() {\n        return (\n            <NavLink\n                exact={this.props.exact}\n                className={\"nav__link\"}\n                activeClassName={\"nav__link__active\"}\n                to={this.props.link}\n            >\n                {this.props.name}\n            </NavLink>\n        );\n    }\n}\n\n\nexport default NavBarLink;","import React from 'react';\nimport NavBarLink from \"./NavBarLink\";\n\nclass NavBar extends React.Component{\n\n    render() {\n        return(\n            <nav className={'nav-bar'}>\n                <div className={'nav-bar__container'}>\n                <NavBarLink exact={true} link={\"/\"} name={\"Home page\"}/>\n                <NavBarLink link={\"/login\"} name={\"Login\"}/>\n                <NavBarLink link={\"/authenticated\"} name={\"Authenticated\"}/>\n                <NavBarLink link={\"/users\"} name={\"User list\"}/>\n                </div>\n            </nav>\n        );\n    }\n}\n\nexport default NavBar;","import React from 'react';\n\nclass Header extends React.Component{\n    render() {\n        return(\n            <div className={'header'}>\n                <img src=\"/react-gif.gif\" alt=\"\"/>\n            </div>\n        );\n    }\n}\n\nexport default Header;","import React from 'react';\n\nclass Footer extends React.Component{\n    render() {\n        return(\n            <footer className={'footer'}>\n                <div className=\"footer--logo\">\n                    <img src=\"/logo192.png\" alt=\"\"/>\n                </div>\n                <div className=\"footer--content\">\n                    <p>&#169; design by Infernet</p>\n                </div>\n            </footer>\n        );\n    }\n}\n\nexport default Footer;","import React from 'react';\nimport InputLogin from \"../views/components/Authenticated/InputLogin\";\nimport InputPassword from \"../views/components/Authenticated/InputPassword\";\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {changeLogin, changePassword, signIn} from \"../actions/loginAuthActions\";\nimport NavBar from \"../views/components/NavBar/NavBar\";\nimport Header from \"../views/components/Header/Header\";\nimport Footer from \"../views/components/Footer/Footer\";\nimport DocumentTitle from \"react-document-title\";\n\nclass Authorization extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        this.props.signIn({\n            login: this.props.login,\n            password: this.props.password\n        });\n\n    }\n\n    render() {\n        const {setLogin, setPassword, login, password} = this.props;\n        return (\n            <div>\n                <DocumentTitle title={\"Sign in\"} />\n                <Header/>\n                <NavBar/>\n                <div className=\"authorization-body\">\n                    <div className=\"authorization__title\">\n                        <h3>Login Page</h3>\n                    </div>\n                    <div className=\"authorization__content\">\n                        <form className={'authorization__content--form'} onSubmit={this.handleSubmit}>\n\n                            <InputLogin login={login} setValue={setLogin} class={'Login'}/>\n                            <InputPassword password={password} class={'Password'} setValue={setPassword}/>\n                            <button type=\"submit\">sign in</button>\n                        </form>\n                    </div>\n                </div>\n                <Footer/>\n            </div>\n        );\n    }\n}\n\n\nAuthorization.propsTypes = {\n    login: PropTypes.string.isRequired,\n    password: PropTypes.string.isRequired,\n    setLogin: PropTypes.func.isRequired,\n    setPassword: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = store => {\n    return {\n        login: store.user.login,\n        password: store.user.password\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        setLogin: login => dispatch(changeLogin(login)),\n        setPassword: password => dispatch(changePassword(password)),\n        signIn: data => dispatch(signIn(data))\n    }\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Authorization);\n","import {\n    CHANGE_LOGIN,\n    CHANGE_PASSWORD,\n    SIGN_IN_FAILED,\n    SIGN_IN_SUCCESS,\n    SIGN_OUT\n} from \"../constants/authorization\";\nimport {\n    AUTH_WITH_TOKEN_SUCCESS,\n    SIGN_OUT_TOKEN\n} from \"../constants/token\";\nimport axios from \"axios\";\nimport Fingerprint2 from \"fingerprintjs2\";\nimport {store} from \"../store/configureStore\";\n\nexport function changeLogin(login) {\n    return {\n        type: CHANGE_LOGIN,\n        payload: login\n    }\n}\n\nexport function changePassword(password) {\n    return {\n        type: CHANGE_PASSWORD,\n        payload: password\n    }\n}\n\nexport function signIn() {\n    return dispatch => {\n        const authStore = store.getState().user;\n        Fingerprint2.getV18(((fingerPrint => {\n            axios.post('/request/login/login-auth', {\n                login: authStore.login,\n                password: authStore.password,\n                fingerPrint: fingerPrint\n            })\n                .then(response => {\n                    localStorage.setItem('accessToken', response.data.tokens.accessToken);\n                    localStorage.setItem('refreshToken', response.data.tokens.refreshToken);\n                    dispatch({type: SIGN_IN_SUCCESS, payload: response.data.user});\n                    dispatch({type: AUTH_WITH_TOKEN_SUCCESS, payload: response.data.tokens});\n                })\n                .catch(reason => dispatch({type: SIGN_IN_FAILED}));\n        })));\n    }\n}\n\nexport function signOut() {\n    return dispatch => {\n        const tokenStore = store.getState().tokenAuth;\n        Fingerprint2.getV18(fingerPrint => {\n            axios.post('/request/login/sign-out', {fingerPrint: fingerPrint},\n                {headers: {'authorization': 'Bearer ' + tokenStore.refreshToken}})\n                .finally(() => {\n                    localStorage.removeItem('accessToken');\n                    localStorage.removeItem('refreshToken');\n                    dispatch({type: SIGN_OUT});\n                    dispatch({type: SIGN_OUT_TOKEN});\n                })\n        })\n    }\n}\n","import React from 'react';\n\nclass ContentCart extends React.Component {\n\n\n    render() {\n        return (\n            <div className={this.props.class.container}>\n                <p className={this.props.class.title}>{this.props.title}</p>\n                <p className={this.props.class.content}>{this.props.content}</p>\n            </div>\n        );\n    }\n}\n\nexport default ContentCart;","import React from 'react';\nimport {connect} from 'react-redux';\nimport NavBar from \"../views/components/NavBar/NavBar\";\nimport ContentCart from \"../views/components/Home/ContentCart\";\nimport Footer from \"../views/components/Footer/Footer\";\nimport Header from \"../views/components/Header/Header\";\nimport DocumentTitle from 'react-document-title';\n\n\nclass Home extends React.Component {\n\n    render() {\n        const {store} = this.props;\n        let classNames = {\n            container: \"home__content--container\",\n            title: \"home__content--title\",\n            content: \"home__content--content\"\n        };\n        return (\n            <div>\n                <DocumentTitle title={\"Home page\"}/>\n                <Header/>\n                <NavBar/>\n                <div className={'home-body'}>\n                    <div className={'home__title'}>\n                        <h3>Home page</h3>\n                    </div>\n                    <div className={'home__content'}>\n                        {\n                            (store.token.accessToken !== null) ?\n                                Object.keys(store.user).map(e => {\n                                    if (e !== 'token' && store.user[e] !== '')\n                                        return <ContentCart\n                                            key={e}\n                                            class={classNames}\n                                            title={e + ':'}\n                                            content={store.user[e]}\n                                        />;\n                                })\n                                :\n                                <ContentCart\n                                    class={classNames}\n                                    title={'Ошибка:'}\n                                    content={'Вы не авторизованы'}\n                                />\n                        }\n                    </div>\n                </div>\n                <Footer/>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = store => {\n    return {\n        store: store\n    }\n};\nexport default connect(mapStateToProps)(Home);","import React from 'react';\nimport {connect} from 'react-redux';\nimport {signOut} from \"../actions/loginAuthActions\";\nimport NavBar from \"../views/components/NavBar/NavBar\";\nimport Header from \"../views/components/Header/Header\";\nimport Footer from \"../views/components/Footer/Footer\";\nimport DocumentTitle from \"react-document-title\";\n\nclass Authenticated extends React.Component {\n    render() {\n        const {store} = this.props;\n        return (\n            <div>\n                <DocumentTitle title={\"Authenticated\"}/>\n                <Header/>\n                <NavBar/>\n                <div className=\"authenticated-body\">\n                    <div className=\"authenticated--title\">\n                        <h3>Authenticated page</h3>\n                    </div>\n                    <ul className={\"authenticated--content\"}>\n                        {\n                            Object.keys(store.user).map(e => {\n                                if (e !== 'token')\n                                    return <li key={e}>{e}: {store.user[e]}</li>;\n                                else\n                                    return false;\n                            })\n                        }\n                    </ul>\n                    <button className={\"authenticated--button\"} onClick={this.props.signOut}>Log out</button>\n                </div>\n                <Footer/>\n            </div>\n        );\n    }\n}\n\n\nconst mapStateToProps = store => {\n    return {\n        store: store\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        signOut: () => dispatch(signOut())\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Authenticated);\n","import {\n    AUTH_WITH_TOKEN_FAILED,\n    AUTH_WITH_TOKEN_SUCCESS,\n    REFRESH_TOKEN_FAILED,\n    REFRESH_TOKEN_SUCCESS,\n    RESTORE_TOKEN,\n    SIGN_OUT_TOKEN\n} from \"../constants/token\";\nimport axios from \"axios\";\nimport {store} from \"../store/configureStore\";\nimport {SIGN_IN_SUCCESS, SIGN_OUT} from \"../constants/authorization\";\nimport Fingerprint2 from 'fingerprintjs2';\n\nexport function tokenAuth() {\n    return dispatch => {\n        const tokenStore = store.getState().token;\n        Fingerprint2.getV18(fingerPrint => {\n            axios.post('/request/login/token-auth', {fingerPrint: fingerPrint},\n                {headers: {'authorization': 'Bearer ' + tokenStore.accessToken},})\n                .then(response => {\n                    if (response.status !== 200) throw new Error();\n                    dispatch({type: AUTH_WITH_TOKEN_SUCCESS});\n                    dispatch({type: SIGN_IN_SUCCESS, payload: response.data.user});\n                })\n                .catch(reason => {\n                    if (reason.request.status === 401 && tokenStore.refreshToken !== null)\n                        dispatch(refreshAccessToken(tokenAuth));\n                    else {\n                        localStorage.removeItem('accessToken');\n                        localStorage.removeItem('refreshToken');\n                        dispatch({type: AUTH_WITH_TOKEN_FAILED});\n                        dispatch({type: SIGN_OUT});\n                    }\n                });\n        });\n    }\n}\n\nexport function refreshAccessToken(action) {\n    return dispatch => {\n        const tokenStore = store.getState().token;\n        Fingerprint2.getV18(fingerPrint => {\n            axios.post('/request/login/refresh-token', {fingerPrint: fingerPrint},\n                {\n                    headers: {'authorization': 'Bearer ' + tokenStore.refreshToken}\n                })\n                .then(response => {\n                    localStorage.setItem('accessToken', response.data.accessToken);\n                    localStorage.setItem('refreshToken', response.data.refreshToken);\n                    dispatch({type: REFRESH_TOKEN_SUCCESS, payload: response.data});\n                    dispatch(action());\n                })\n                .catch(reason => {\n                    localStorage.removeItem('accessToken');\n                    localStorage.removeItem('refreshToken');\n                    dispatch({type: REFRESH_TOKEN_FAILED});\n                    dispatch({type: SIGN_OUT});\n                })\n        })\n    }\n}\n\nexport function restoreToken() {\n    return dispatch => {\n        let accessToken = localStorage.getItem('accessToken');\n        let refreshToken = localStorage.getItem('refreshToken');\n        if (accessToken !== null && refreshToken !== null) {\n            dispatch({\n                type: RESTORE_TOKEN,\n                payload: {accessToken: accessToken, refreshToken: refreshToken}\n            });\n            dispatch(tokenAuth());\n        } else {\n            localStorage.removeItem('accessToken');\n            localStorage.removeItem('refreshToken');\n            dispatch({type: SIGN_OUT});\n            dispatch({type: SIGN_OUT_TOKEN});\n        }\n    }\n}","import {\n    DELETE_USER_FAILED,\n    DELETE_USER_SUCCESS,\n    INSERT_USER_FAILED,\n    INSERT_USER_SUCCESS,\n    GET_USERS_FAILED,\n    GET_USERS_SUCCESS,\n    UPDATE_USER_FAILED,\n    UPDATE_USER_SUCCESS,\n    CHANGE_USER,\n    CLEAR_USER_DATA,\n    CHANGE_OPERATION, CHANGE_USER_DATA\n} from \"../constants/users\";\nimport axios from \"axios\";\nimport {store} from \"../store/configureStore\";\nimport {refreshAccessToken} from \"./tokenAuthActions\";\nimport {OPERATION_SHOW_LIST} from \"../constants/userOperationType\";\nimport {push} from \"react-router-redux\";\n\nexport function changeUser(id) {\n    return dispatch => {\n        dispatch({type: CHANGE_USER, payload: id})\n    };\n}\n\nexport function loadUserForUpdate() {\n    return dispatch => {\n        const listStore = store.getState().userList;\n        const selectedId = listStore.selectedId;\n        let user = listStore.users.find((elem) => {\n            return elem.id === selectedId;\n        });\n        let userData = Object.assign({}, user);\n        delete userData.id;\n        dispatch({\n            type: CHANGE_USER_DATA,\n            payload: userData\n        });\n    }\n}\n\n\nexport function changeOperation(operation) {\n    return {type: CHANGE_OPERATION, payload: operation};\n}\n\nexport function getUsers() {\n    return dispatch => {\n        const token = store.getState().token.accessToken;\n        axios.post('/request/user/get', {}, {headers: {'authorization': 'Bearer ' + token}})\n            .then(response => dispatch({type: GET_USERS_SUCCESS, payload: response.data.users}))\n            .catch(reason => {\n                if (reason.request.status === 401)\n                    dispatch(refreshAccessToken(getUsers));\n                else\n                    dispatch({type: GET_USERS_FAILED});\n            })\n    }\n}\n\n\nexport function insertUser() {\n    return dispatch => {\n        const token = store.getState().token.accessToken;\n        const userDataStore = store.getState().userFormsData;\n        axios.post('/request/user/insert',\n            {user: userDataStore},\n            {headers: {'authorization': 'Bearer ' + token}}\n        )\n            .then(response => {\n                dispatch({type: INSERT_USER_SUCCESS, payload: response.data.users});\n                dispatch({type: CLEAR_USER_DATA});\n                dispatch({type: CHANGE_OPERATION, payload: OPERATION_SHOW_LIST});\n            })\n            .catch(reason => {\n                if (reason.request.status === 401)\n                    dispatch(refreshAccessToken(insertUser));\n                else {\n                    dispatch({type: INSERT_USER_FAILED});\n                    dispatch(push('/login'));\n                }\n            })\n    }\n}\n\nexport function updateUser() {\n    return dispatch => {\n        const token = store.getState().token.accessToken;\n        const usersStore = store.getState().userFormsData;\n        const selectedId = store.getState().userList.selectedId;\n        axios.post('/request/user/update',\n            {userData: usersStore, userId: selectedId},\n            {headers: {'authorization': 'Bearer ' + token}}\n        )\n            .then(response => {\n                dispatch({type: UPDATE_USER_SUCCESS, payload: response.data.users});\n                dispatch({type: CLEAR_USER_DATA});\n                dispatch(changeUser(null));\n                dispatch({type: CHANGE_OPERATION, payload: OPERATION_SHOW_LIST});\n            })\n            .catch(reason => {\n                if (reason.request.status === 401)\n                    dispatch(refreshAccessToken(updateUser));\n                else {\n                    dispatch({type: UPDATE_USER_FAILED});\n                    dispatch(push('/login'));\n                }\n            })\n    }\n}\n\nexport function deleteUser() {\n    return dispatch => {\n        const token = store.getState().token.accessToken;\n        const usersStore = store.getState().userList;\n        axios.post('/request/user/delete',\n            {id: usersStore.selectedId},\n            {headers: {'authorization': 'Bearer ' + token}}\n        )\n            .then(response => {\n                dispatch({type: DELETE_USER_SUCCESS, payload: response.data.users});\n                dispatch(changeUser(null));\n                dispatch({type: CHANGE_OPERATION, payload: OPERATION_SHOW_LIST});\n            })\n            .catch(reason => {\n                if (reason.request.status === 401)\n                    dispatch(refreshAccessToken(deleteUser));\n                else\n                    dispatch({type: DELETE_USER_FAILED});\n            })\n    }\n}\n","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {changeOperation, deleteUser, insertUser, updateUser} from \"../../../actions/usersActions\";\nimport {\n    OPERATION_DELETE_USER,\n    OPERATION_INSERT_USER, OPERATION_SHOW_LIST,\n    OPERATION_UPDATE_USER\n} from \"../../../constants/userOperationType\";\n\n\nclass ControlPanel extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.onInsertUser = this.onInsertUser.bind(this);\n        this.onUpdateUser = this.onUpdateUser.bind(this);\n        this.onDeleteUser = this.onDeleteUser.bind(this);\n        this.onShowUsers = this.onShowUsers.bind(this);\n    }\n\n    onInsertUser(e) {\n        e.preventDefault();\n        this.props.selectOperation(OPERATION_INSERT_USER);\n    }\n\n    onUpdateUser(e) {\n        e.preventDefault();\n        this.props.selectOperation(OPERATION_UPDATE_USER);\n    }\n\n    onDeleteUser(e) {\n        e.preventDefault();\n        this.props.selectOperation(OPERATION_DELETE_USER);\n    }\n\n    onShowUsers(e) {\n        e.preventDefault();\n        this.props.selectOperation(OPERATION_SHOW_LIST);\n    }\n\n    render() {\n        return (\n            <div className=\"users__control-panel--container\">\n                <button className={\"users__control-panel--btn\"} onClick={this.onShowUsers}>Список пользователей</button>\n                <button className=\"users__control-panel--btn\" onClick={this.onInsertUser}>Добавить</button>\n                <button className=\"users__control-panel--btn\" onClick={this.onUpdateUser}>Изменить</button>\n                <button className=\"users__control-panel--btn\" onClick={this.onDeleteUser}>Удалить</button>\n            </div>\n        );\n    }\n}\n\nControlPanel.propsTypes = {\n    store: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = store => {\n    return {\n        store: store.userList\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        selectOperation: operation => dispatch(changeOperation(operation))\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ControlPanel);","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport {NavLink} from \"react-router-dom\";\n\n\nclass User extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.onSelect=this.onSelect.bind(this);\n    }\n\n    onSelect(e){\n        e.preventDefault();\n        this.props.select(this.props.user.id);\n    }\n\n\n    render() {\n        const user = this.props.user;\n        return (\n            <NavLink to={''} onClick={this.onSelect} className=\"users__list--item-container\" activeClassName={'users__list--item--container__active'}>\n                {\n                    Object.keys(user).map(e => {\n                        return <p className=\"users__list--item-content\" key={e}>{user[e]}</p>\n                    })\n                }\n            </NavLink>\n        );\n    }\n}\n\nUser.propsTypes = {\n    user: PropTypes.object.isRequired,\n    select: PropTypes.func.isRequired\n};\n\n\nexport default User;","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {\n    changeEmail,\n    changeFirstName,\n    changeLastName,\n    changeLogin,\n    changePassword, changeRole, clearUserData\n} from \"../../../actions/userFormHandlerActions\";\nimport {insertUser, loadUserForUpdate, updateUser} from \"../../../actions/usersActions\";\nimport {OPERATION_INSERT_USER, OPERATION_UPDATE_USER} from \"../../../constants/userOperationType\";\n\n\nclass InsertUserForm extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.changeLogin = this.changeLogin.bind(this);\n        this.changePassword = this.changePassword.bind(this);\n        this.changeFirstName = this.changeFirstName.bind(this);\n        this.changeLastName = this.changeLastName.bind(this);\n        this.changeEmail = this.changeEmail.bind(this);\n        this.changeRadio = this.changeRadio.bind(this);\n        this.handlerForm = this.handlerForm.bind(this);\n    }\n\n    componentWillMount() {\n        switch (this.props.operation) {\n            case OPERATION_INSERT_USER:\n                this.props.clearData();\n                break;\n            case OPERATION_UPDATE_USER:\n                this.props.clearData();\n                this.props.loadData();\n                break;\n            default:\n                return;\n        }\n    }\n\n    changeLogin(e) {\n        this.props.changeLogin(e.target.value);\n    }\n\n    changePassword(e) {\n        this.props.changePassword(e.target.value);\n    }\n\n    changeFirstName(e) {\n        this.props.changeFirstName(e.target.value);\n    }\n\n    changeLastName(e) {\n        this.props.changeLastName(e.target.value);\n    }\n\n    changeEmail(e) {\n        this.props.changeEmail(e.target.value);\n    }\n\n    changeRadio(e) {\n        this.props.changeRadio(+e.target.value);\n    }\n\n    handlerForm(e) {\n        e.preventDefault();\n        switch (this.props.operation) {\n            case OPERATION_INSERT_USER:\n                this.props.insertUser();\n                break;\n            case OPERATION_UPDATE_USER:\n                this.props.updateUser();\n                break;\n            default:\n                return;\n        }\n    }\n\n    render() {\n        const user = this.props.user;\n        return (\n            <form className=\"users_form_insert\" onSubmit={this.handlerForm}>\n                <div className=\"users_form--group\">\n                    <label htmlFor={'login'}>Login</label>\n                    <input id={'login'} name={'login'} type=\"text\"\n                           value={user.login}\n                           autoComplete=\"new-login\"\n                           required\n                           onChange={this.changeLogin}/>\n                </div>\n                <div className=\"users_form--group\">\n                    <label htmlFor={'password'}>Password</label>\n                    <input id={'password'} name={'password'} type=\"password\"\n                           value={user.password}\n                           autoComplete=\"new-password\"\n                           required\n                           onChange={this.changePassword}/>\n                </div>\n                <div className=\"users_form--group\">\n                    <label htmlFor={'firstName'}>First name</label>\n                    <input id={'firstName'} name={'firstName'} type=\"text\"\n                           value={user.firstName}\n                           required\n                           onChange={this.changeFirstName}/>\n                </div>\n                <div className=\"users_form--group\">\n                    <label htmlFor={'lastName'}>Last name</label>\n                    <input id={'lastName'} name={'lastName'}\n                           value={user.lastName}\n                           type=\"text\"\n                           onChange={this.changeLastName}/>\n                </div>\n                <div className=\"users_form--group\">\n                    <label htmlFor={'email'}>Email</label>\n                    <input id={'email'} name={'email'} type=\"email\"\n                           value={user.email}\n                           required\n                           onChange={this.changeEmail}/>\n                </div>\n                <div className=\"users_form--group\">\n                    <div className=\"users_form--radio--group\">\n                        <label htmlFor=\"user_role\">User</label>\n                        <input type=\"radio\" id={\"user_role\"} name={'role'} className=\"users_form--radio-role\"\n                               value={'0'}\n                               checked={user.role === 0}\n                               onChange={this.changeRadio}/>\n                    </div>\n                    <div className=\"users_form--radio--group\">\n                        <label htmlFor=\"admin_role\">Admin</label>\n                        <input type=\"radio\" id={\"admin_role\"} name={'role'} className=\"users_form--radio-role\"\n                               value={'1'}\n                               checked={user.role === 1}\n                               onChange={this.changeRadio}/>\n                    </div>\n                </div>\n                <button type={'submit'}>create user</button>\n            </form>\n        );\n    }\n}\n\nInsertUserForm.propsTypes = {\n    user: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = store => {\n    return {\n        user: store.userFormsData,\n        operation: store.userList.selectedOperation\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        insertUser: () => dispatch(insertUser()),\n        loadData: () => dispatch(loadUserForUpdate()),\n        clearData: () => dispatch(clearUserData()),\n        updateUser: () => dispatch(updateUser()),\n        changeLogin: login => dispatch(changeLogin(login)),\n        changePassword: password => dispatch(changePassword(password)),\n        changeFirstName: firstName => dispatch(changeFirstName(firstName)),\n        changeLastName: lastName => dispatch(changeLastName(lastName)),\n        changeEmail: email => dispatch(changeEmail(email)),\n        changeRadio: role => dispatch(changeRole(role))\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InsertUserForm);","import {\n    FORM_CHANGE_LOGIN,\n    FORM_CHANGE_PASSWORD,\n    FORM_CHANGE_FIRST_NAME,\n    FORM_CHANGE_LAST_NAME,\n    FORM_CHANGE_EMAIL,\n    FORM_CHANGE_ROLE, CLEAR_USER_DATA\n} from \"../constants/users\";\n\nexport function clearUserData() {\n    return ({type: CLEAR_USER_DATA});\n}\n\nexport function changeLogin(login) {\n    return {type: FORM_CHANGE_LOGIN, payload: {login: login}}\n}\n\nexport function changePassword(password) {\n    return {type: FORM_CHANGE_PASSWORD, payload: {password: password}}\n}\n\nexport function changeFirstName(firstName) {\n    return {type: FORM_CHANGE_FIRST_NAME, payload: {firstName: firstName}}\n}\n\nexport function changeLastName(lastName) {\n    return {type: FORM_CHANGE_LAST_NAME, payload: {lastName: lastName}}\n}\n\nexport function changeEmail(email) {\n    return {type: FORM_CHANGE_EMAIL, payload: {email: email}}\n}\n\nexport function changeRole(role) {\n    return {type: FORM_CHANGE_ROLE, payload: {role: role}}\n}","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {changeOperation, changeUser, deleteUser} from \"../../../actions/usersActions\";\nimport {OPERATION_SHOW_LIST} from \"../../../constants/userOperationType\";\n\nclass InsertUserForm extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.deleteAccept = this.deleteAccept.bind(this);\n        this.deleteDeny = this.deleteDeny.bind(this);\n    }\n\n    deleteAccept(e) {\n        e.preventDefault();\n        this.props.deleteUser();\n        this.props.changeOperation();\n        this.props.clearUser();\n    }\n\n    deleteDeny(e) {\n        e.preventDefault();\n        this.props.changeOperation();\n        this.props.clearUser();\n    }\n\n    render() {\n        const user = this.props.user;\n        return (\n            <div className=\"users_form_delete\">\n                <p className=\"users_form_delete_message\">Вы уверены, что хотите удалить пользователя: {user.login?user.login:'empty'}?</p>\n                <div className=\"users_form_delete_btn-group\">\n                    <button className=\"users_form_delete_btn\" onClick={this.deleteAccept}>Удалить</button>\n                    <button className=\"users_form_delete_btn\" onClick={this.deleteDeny}>Отмена</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nInsertUserForm.propsTypes = {\n    user: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = store => {\n    return {\n        user: store.userFormsData\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        deleteUser: () => dispatch(deleteUser()),\n        changeOperation: () => dispatch(changeOperation(OPERATION_SHOW_LIST)),\n        clearUser: () => dispatch(changeUser(null))\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InsertUserForm);","import React from 'react';\nimport {connect} from 'react-redux';\nimport NavBar from \"../views/components/NavBar/NavBar\";\nimport Header from \"../views/components/Header/Header\";\nimport Footer from \"../views/components/Footer/Footer\";\nimport ControlPanel from \"../views/components/Users/ControlPanel\";\nimport PropTypes from 'prop-types';\nimport {changeUser, getUsers} from \"../actions/usersActions\";\nimport User from \"../views/components/Users/User\";\nimport {\n    OPERATION_DELETE_USER,\n    OPERATION_INSERT_USER,\n    OPERATION_SHOW_LIST,\n    OPERATION_UPDATE_USER\n} from \"../constants/userOperationType\";\nimport InsertUserForm from \"../views/components/Users/InsertUserForm\";\nimport DeleteUserForm from \"../views/components/Users/DeleteUserForm\";\nimport DocumentTitle from \"react-document-title\";\n\nclass UsersList extends React.Component {\n    componentDidMount() {\n        this.props.getUsers();\n    }\n\n    render() {\n        const store = this.props.store;\n        const users = this.props.store.users;\n        switch (store.selectedOperation) {\n            case OPERATION_SHOW_LIST:\n                return (\n                    <div>\n                        <DocumentTitle title={\"User list\"}/>\n                        <Header/>\n                        <NavBar/>\n                        <ControlPanel/>\n                        <div className=\"users-body\">\n                            <div className=\"users__list-header\">\n                                {\n                                    store.userData.map(e => {\n                                        return <p className=\"users__list-header--title\" key={e}>{e}</p>\n                                    })\n                                }\n                            </div>\n                            {\n                                users.map(e => {\n                                    return <User user={e} key={e.id} select={this.props.selectUser}/>\n                                })\n                            }\n                        </div>\n                        <Footer/>\n                    </div>\n                );\n            case OPERATION_UPDATE_USER:\n            case OPERATION_INSERT_USER:\n                return (\n                    <div>\n                        <DocumentTitle\n                            title={store.selectedOperation === OPERATION_UPDATE_USER ? \"Update user\" : \"Insert user\"}/>\n                        <Header/>\n                        <NavBar/>\n                        <ControlPanel/>\n                        <InsertUserForm/>\n                        <Footer/>\n                    </div>\n                );\n            case OPERATION_DELETE_USER :\n                return (\n                    <div>\n                        <DocumentTitle title={\"Delete user\"}/>\n                        <Header/>\n                        <NavBar/>\n                        <ControlPanel/>\n                        <DeleteUserForm/>\n                        <Footer/>\n                    </div>\n                );\n            default:\n                return (\n                    <div>\n                        <DocumentTitle title={\"Empty result\"}/>\n                        <Header/>\n                        <NavBar/>\n                        <div style={{height: '100%', width: '100%', display: 'flex'}}>\n                            <h1 style={{color: \"black\", margin: \"auto\"}}>EMPTY RESULT</h1>\n                        </div>\n                        <Footer/>\n                    </div>\n                );\n        }\n    }\n}\n\nUsersList.propTypes = {\n    store: PropTypes.object.isRequired,\n    selectUser: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = store => {\n    return {\n        store: store.userList\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        getUsers: () => dispatch(getUsers()),\n        selectUser: user => dispatch(changeUser(user)),\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersList);","import {Redirect, Route, Switch} from 'react-router-dom';\nimport React from \"react\";\nimport {connect} from \"react-redux\";\nimport Authorization from \"../containers/Authorization\";\nimport Home from \"../containers/Home\";\nimport Authenticated from \"../containers/Authenticated\";\nimport PropTypes from 'prop-types';\nimport UserList from \"../containers/UsersList\";\n\n\nclass Routes extends React.Component {\n    render() {\n        const accessToken = this.props.token.accessToken;\n        return (\n            <Switch fallback={<div>HELLO</div>}>\n                <Route path={\"/\"} exact component={Home}/>\n                {\n                    (accessToken !== null) ?\n                        <Redirect from={\"/login\"} to={\"/authenticated\"}/> :\n                        <Redirect from={\"/authenticated\"} to={\"/login\"}/>\n                }\n                {/*{*/}\n                {/*    accessToken === null &&*/}\n                {/*    <Redirect from={\"/users\"} to={\"/login\"}/>*/}\n                {/*}*/}\n                <Route path={\"/login\"} component={Authorization}/>\n                <Route path={\"/authenticated\"} component={Authenticated}/>\n                <Route path={\"/users\"} component={UserList}/>\n            </Switch>\n        );\n    }\n}\n\nRoutes.propTypes = {\n    token: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = store => {\n    return {\n        token: store.token\n    }\n};\n\nexport default connect(mapStateToProps)(Routes);","import React from 'react';\nimport {connect} from 'react-redux';\nimport {BrowserRouter} from \"react-router-dom\";\nimport Routes from \"../routes\";\nimport PropTypes from \"prop-types\";\nimport {restoreToken} from \"../actions/tokenAuthActions\";\n\n\nclass App extends React.Component {\n    componentDidMount() {\n        const token=this.props.token;\n        if (token.accessToken === null && token.refreshToken === null)\n            this.props.restoreToken();\n    }\n\n    render() {\n        return (\n            <BrowserRouter>\n                <Routes/>\n            </BrowserRouter>\n        );\n    }\n}\n\nApp.propsTypes = {\n    user: PropTypes.object.isRequired\n};\nconst mapStateToProps = store => {\n    return {\n        user: store.user,\n        token: store.token\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        restoreToken: () => dispatch(restoreToken())\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sass/index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./containers/App\";\nimport {store} from \"./store/configureStore\";\nimport {Provider} from \"react-redux\";\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n//\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
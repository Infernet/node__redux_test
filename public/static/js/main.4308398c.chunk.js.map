{"version":3,"sources":["serviceWorker.js","views/components/Authenticated/InputLogin.jsx","views/components/Authenticated/InputPassword.jsx","constants/authorization.js","constants/token.js","reducers/userReducer.js","constants/users.js","reducers/usersReducer.js","reducers/tokenReducer.js","reducers/rootReducer.js","store/configureStore.js","views/components/NavBar/NavBarLink.jsx","views/components/NavBar/NavBar.jsx","views/components/Header/Header.jsx","views/components/Footer/Footer.jsx","containers/Authorization.jsx","actions/loginAuthActions.js","views/components/Home/ContentCart.jsx","containers/Home.jsx","containers/Authenticated.jsx","actions/tokenAuthActions.js","actions/usersActions.js","views/components/Users/ControlPanel.jsx","views/components/Users/User.jsx","containers/UsersList.jsx","routes/index.jsx","containers/App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","InputLogin","props","onChange","bind","e","this","setValue","target","value","className","class","htmlFor","type","id","name","placeholder","login","autoComplete","React","Component","InputPassword","password","CHANGE_LOGIN","CHANGE_PASSWORD","SIGN_IN_SUCCESS","SIGN_IN_REQUEST","SIGN_IN_FAILED","SIGN_OUT","SIGN_OUT_TOKEN","RESTORE_TOKEN","CLEAR_TOKEN_DATA","AUTH_WITH_TOKEN_SUCCESS","AUTH_WITH_TOKEN_FAILED","REFRESH_TOKEN_SUCCESS","REFRESH_TOKEN_FAILED","initialState","role","CLEAR_USER_DATA","GET_USERS_SUCCESS","GET_USERS_FAILED","CHANGE_USER","INSERT_USER_SUCCESS","INSERT_USER_FAILED","UPDATE_USER_SUCCESS","UPDATE_USER_FAILED","DELETE_USER_SUCCESS","DELETE_USER_FAILED","selectedId","users","user","email","firstName","lastName","accessToken","refreshToken","rootReducer","combineReducers","state","action","Object","assign","payload","token","userList","store","createStore","applyMiddleware","thunk","logger","NavBarLink","exact","activeClassName","to","link","NavBar","Header","src","alt","Footer","Authorization","handleSubmit","preventDefault","signIn","setLogin","setPassword","onSubmit","propsTypes","PropTypes","string","isRequired","func","connect","dispatch","changeLogin","changePassword","data","authStore","getState","Fingerprint2","getV18","fingerPrint","axios","post","then","response","localStorage","setItem","catch","reason","ContentCart","container","title","content","Home","classNames","keys","map","key","Authenticated","onClick","signOut","tokenStore","tokenAuth","headers","finally","removeItem","status","Error","request","refreshAccessToken","changeUser","getUsers","insertUser","usersStore","updateUser","deleteUser","ControlPanel","onInsertUser","onUpdateUser","onDeleteUser","object","User","onSelect","select","UsersList","length","selectUser","style","height","width","display","color","margin","Routes","path","component","from","UserList","App","restoreToken","getItem","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4308398c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types'\n\nclass InputLogin extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(e) {\n        this.props.setValue(e.target.value);\n    }\n\n    render() {\n        return (\n            <div className={'block'+this.props.class}>\n                <label htmlFor=\"login\" className={'label'+this.props.class}>Login</label>\n                <input type=\"text\"\n                       id={\"login\"}\n                       name={\"login\"}\n                       className={'input'+this.props.class}\n                       onChange={this.onChange}\n                       placeholder={this.props.login}\n                       autoComplete={'false'}\n                />\n            </div>\n        );\n    }\n\n}\n\nInputLogin.propTypes = {\n    login: PropTypes.string,\n    class: PropTypes.string.isRequired\n};\n\nexport default InputLogin;","import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nclass InputPassword extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(e) {\n        this.props.setValue(e.target.value);\n    }\n\n    render() {\n        return (\n            <div className={'block'+this.props.class}>\n                <label htmlFor=\"password\" className={'label'+this.props.class}>Password</label>\n                <input type=\"password\"\n                       id={\"password\"}\n                       name={\"password\"}\n                       className={'input'+this.props.class}\n                       onChange={this.onChange}\n                       placeholder={this.props.password}\n                       autoComplete={'false'}\n                />\n            </div>\n        );\n    }\n\n}\n\nInputPassword.propTypes = {\n    password: PropTypes.string,\n    class:PropTypes.string.isRequired\n};\n\nexport default InputPassword;","export const CHANGE_LOGIN = \"CHANGE_LOGIN\";\nexport const CHANGE_PASSWORD = \"CHANGE_PASSWORD\";\nexport const SIGN_IN_SUCCESS = \"SIGN_IN_SUCCESS\";\nexport const SIGN_IN_REQUEST = \"SIGN_IN_REQUEST\";\nexport const SIGN_IN_FAILED = \"SIGN_IN_FAILED\";\nexport const SIGN_OUT = \"SIGN_OUT\";\nexport const TEST=\"TEST\";","//sign out\nexport const SIGN_OUT_TOKEN = \"SIGN_OUT_TOKEN\";\n//restore token\nexport const RESTORE_TOKEN = \"RESTORE_TOKEN\";\nexport const CLEAR_TOKEN_DATA=\"CLEAR_TOKEN_DATA\";\n//auth with access token\nexport const AUTH_WITH_TOKEN_REQUEST = \"AUTH_WITH_TOKEN_REQUEST\";\nexport const AUTH_WITH_TOKEN_SUCCESS = \"AUTH_WITH_TOKEN_SUCCESS\";\nexport const AUTH_WITH_TOKEN_FAILED = \"AUTH_WITH_TOKEN_FAILED\";\n//try to get Access Token\nexport const REFRESH_TOKEN_REQUEST = \"REFRESH_TOKEN_REQUEST\";\nexport const REFRESH_TOKEN_SUCCESS = \"REFRESH_TOKEN_SUCCESS\";\nexport const REFRESH_TOKEN_FAILED = \"REFRESH_TOKEN_FAILED\";","import {\n    CHANGE_LOGIN,\n    CHANGE_PASSWORD,\n    SIGN_IN_FAILED,\n    SIGN_IN_REQUEST,\n    SIGN_IN_SUCCESS,\n    SIGN_OUT,\n} from \"../constants/authorization\";\n\nconst initialState = {\n    id: null,\n    role:0,\n    login: \"\",\n    password: \"\"\n};\n\nexport function userReducer(state = initialState, action) {\n    switch (action.type) {\n        case CHANGE_LOGIN:\n            return Object.assign({}, state, {login: action.payload});\n        case CHANGE_PASSWORD:\n            return Object.assign({}, state, {password: action.payload});\n        case SIGN_IN_REQUEST:\n            return state;\n        case SIGN_IN_SUCCESS:\n            return Object.assign({}, state, action.payload, {password: \"\"});\n        case SIGN_IN_FAILED:\n            return Object.assign({}, state, action.payload );\n        case SIGN_OUT:\n            return Object.assign({}, initialState);\n        default:\n            return state;\n    }\n}","export const CLEAR_USER_DATA = \"CLEAR_USER_DATA\";\nexport const GET_USERS_REQUEST = \"GET_USERS_REQUEST\";\nexport const GET_USERS_SUCCESS = \"GET_USERS_SUCCESS\";\nexport const GET_USERS_FAILED = \"GET_USERS_FAILED\";\nexport const CHANGE_USER = \"CHANGE_USER\";\nexport const INSERT_USER_REQUEST = \"INSERT_USER_REQUEST\";\nexport const INSERT_USER_SUCCESS = \"INSERT_USER_SUCCESS\";\nexport const INSERT_USER_FAILED = \"INSERT_USER_FAILED\";\nexport const UPDATE_USER_REQUEST = \"UPDATE_USER_REQUEST\";\nexport const UPDATE_USER_SUCCESS = \"UPDATE_USER_SUCCESS\";\nexport const UPDATE_USER_FAILED = \"UPDATE_USER_FAILED\";\nexport const DELETE_USER_REQUEST = \"DELETE_USER_REQUEST\";\nexport const DELETE_USER_SUCCESS = \"DELETE_USER_SUCCESS\";\nexport const DELETE_USER_FAILED = \"DELETE_USER_FAILED\";","import {\n    CHANGE_USER, CLEAR_USER_DATA,\n    DELETE_USER_FAILED,\n    DELETE_USER_SUCCESS,\n    GET_USERS_FAILED,\n    GET_USERS_SUCCESS,\n    INSERT_USER_FAILED,\n    INSERT_USER_SUCCESS,\n    UPDATE_USER_FAILED,\n    UPDATE_USER_SUCCESS\n} from \"../constants/users\";\n\nconst initialState = {\n    selectedId: null,\n    users: [],\n    user: {\n        id:\"\",\n        login: \"\",\n        role:\"\",\n        email: \"\",\n        firstName: \"\",\n        lastName: \"\"\n    }\n};\n\nexport function usersReducer(state = initialState, action) {\n    switch (action.type) {\n        case CHANGE_USER:\n            return Object.assign({}, state, {selectedId: action.payload});\n        case CLEAR_USER_DATA:\n            return Object.assign({}, state, {user: initialState.user});\n        case GET_USERS_SUCCESS:\n        case INSERT_USER_SUCCESS:\n        case UPDATE_USER_SUCCESS:\n        case DELETE_USER_SUCCESS:\n            return Object.assign({}, state, {users: action.payload});\n        case INSERT_USER_FAILED:\n        case UPDATE_USER_FAILED:\n        case DELETE_USER_FAILED:\n        case GET_USERS_FAILED:\n            return Object.assign({}, state, {users: initialState.users});\n        default:\n            return state;\n    }\n}","import {\n    AUTH_WITH_TOKEN_FAILED,\n    AUTH_WITH_TOKEN_SUCCESS,\n    REFRESH_TOKEN_FAILED,\n    REFRESH_TOKEN_SUCCESS,\n    RESTORE_TOKEN,\n    CLEAR_TOKEN_DATA,\n    SIGN_OUT_TOKEN\n} from \"../constants/token\";\n\n\nconst initialState = {\n    accessToken: null,\n    refreshToken: null\n};\n\nexport function tokenReducer(state = initialState, action) {\n    switch (action.type) {\n        case RESTORE_TOKEN:\n        case REFRESH_TOKEN_SUCCESS:\n        case AUTH_WITH_TOKEN_SUCCESS:\n            return Object.assign({}, state, action.payload);\n        case REFRESH_TOKEN_FAILED:\n        case AUTH_WITH_TOKEN_FAILED:\n        case CLEAR_TOKEN_DATA:\n        case SIGN_OUT_TOKEN:\n            return Object.assign({}, initialState);\n        default:\n            return state;\n    }\n}","import {combineReducers} from \"redux\";\nimport {userReducer} from \"./userReducer\";\nimport {usersReducer} from \"./usersReducer\";\nimport {tokenReducer} from \"./tokenReducer\";\n\n\nexport const rootReducer = combineReducers({\n    user: userReducer,\n    token: tokenReducer,\n    userList: usersReducer\n});\n","import {createStore, applyMiddleware} from 'redux'\nimport {rootReducer} from \"../reducers/rootReducer\";\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk, logger));\n\n\n\n\n","import React from 'react';\nimport {NavLink} from \"react-router-dom\";\n\nclass NavBarLink extends React.Component {\n\n\n    render() {\n        return (\n            <NavLink\n                exact={this.props.exact}\n                className={\"nav__link\"}\n                activeClassName={\"nav__link__active\"}\n                to={this.props.link}\n            >\n                {this.props.name}\n            </NavLink>\n        );\n    }\n}\n\n\nexport default NavBarLink;","import React from 'react';\nimport NavBarLink from \"./NavBarLink\";\n\nclass NavBar extends React.Component{\n\n    render() {\n        return(\n            <nav className={'nav-bar'}>\n                <div className={'nav-bar__container'}>\n                <NavBarLink exact={true} link={\"/\"} name={\"Home page\"}/>\n                <NavBarLink link={\"/login\"} name={\"Login\"}/>\n                <NavBarLink link={\"/authenticated\"} name={\"Authenticated\"}/>\n                <NavBarLink link={\"/users\"} name={\"User list\"}/>\n                </div>\n            </nav>\n        );\n    }\n}\n\nexport default NavBar;","import React from 'react';\n\nclass Header extends React.Component{\n    render() {\n        return(\n            <div className={'header'}>\n                <img src=\"/react-gif.gif\" alt=\"\"/>\n            </div>\n        );\n    }\n}\n\nexport default Header;","import React from 'react';\n\nclass Footer extends React.Component{\n    render() {\n        return(\n            <footer className={'footer'}>\n                <div className=\"footer--logo\">\n                    <img src=\"/logo192.png\" alt=\"\"/>\n                </div>\n                <div className=\"footer--content\">\n                    <p>&#169; design by Infernet</p>\n                </div>\n            </footer>\n        );\n    }\n}\n\nexport default Footer;","import React from 'react';\nimport InputLogin from \"../views/components/Authenticated/InputLogin\";\nimport InputPassword from \"../views/components/Authenticated/InputPassword\";\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {changeLogin, changePassword, signIn} from \"../actions/loginAuthActions\";\nimport NavBar from \"../views/components/NavBar/NavBar\";\nimport Header from \"../views/components/Header/Header\";\nimport Footer from \"../views/components/Footer/Footer\";\n\nclass Authorization extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        this.props.signIn({\n            login: this.props.login,\n            password: this.props.password\n        });\n\n    }\n\n    render() {\n        const {setLogin, setPassword, login, password} = this.props;\n        return (\n            <div>\n                <Header/>\n                <NavBar/>\n                <div className=\"authorization-body\">\n                    <div className=\"authorization__title\">\n                        <h3>Login Page</h3>\n                    </div>\n                    <div className=\"authorization__content\">\n                        <form className={'authorization__content--form'} onSubmit={this.handleSubmit}>\n\n                            <InputLogin login={login} setValue={setLogin} class={'Login'}/>\n                            <InputPassword password={password} class={'Password'} setValue={setPassword}/>\n                            <button type=\"submit\">sign in</button>\n                        </form>\n                    </div>\n                </div>\n                <Footer/>\n            </div>\n        );\n    }\n}\n\n\nAuthorization.propsTypes = {\n    login: PropTypes.string.isRequired,\n    password: PropTypes.string.isRequired,\n    setLogin: PropTypes.func.isRequired,\n    setPassword: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = store => {\n    return {\n        login: store.user.login,\n        password: store.user.password\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        setLogin: login => dispatch(changeLogin(login)),\n        setPassword: password => dispatch(changePassword(password)),\n        signIn: data => dispatch(signIn(data))\n    }\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Authorization);\n","import {\n    CHANGE_LOGIN,\n    CHANGE_PASSWORD,\n    SIGN_IN_FAILED,\n    SIGN_IN_SUCCESS,\n    SIGN_OUT\n} from \"../constants/authorization\";\nimport {\n    AUTH_WITH_TOKEN_SUCCESS,\n    SIGN_OUT_TOKEN\n} from \"../constants/token\";\nimport axios from \"axios\";\nimport Fingerprint2 from \"fingerprintjs2\";\nimport {store} from \"../store/configureStore\";\n\nexport function changeLogin(login) {\n    return {\n        type: CHANGE_LOGIN,\n        payload: login\n    }\n}\n\nexport function changePassword(password) {\n    return {\n        type: CHANGE_PASSWORD,\n        payload: password\n    }\n}\n\nexport function signIn() {\n    return dispatch => {\n        const authStore = store.getState().user;\n        Fingerprint2.getV18(((fingerPrint => {\n            axios.post('/request/login/login-auth', {\n                login: authStore.login,\n                password: authStore.password,\n                fingerPrint: fingerPrint\n            })\n                .then(response => {\n                    localStorage.setItem('accessToken', response.data.accessToken);\n                    localStorage.setItem('refreshToken', response.data.refreshToken);\n                    dispatch({type: SIGN_IN_SUCCESS, payload: response.data.user});\n                    dispatch({type: AUTH_WITH_TOKEN_SUCCESS, payload: response.data.token});\n                })\n                .catch(reason => dispatch({type: SIGN_IN_FAILED}));\n        })));\n    }\n}\n\nexport function signOut() {\n    return dispatch => {\n        const tokenStore = store.getState().tokenAuth;\n        Fingerprint2.getV18(fingerPrint => {\n            axios.post('/request/login/sign-out', {fingerPrint: fingerPrint},\n                {headers: {'authorization': 'Bearer ' + tokenStore.refreshToken}})\n                .finally(() => {\n                    localStorage.removeItem('accessToken');\n                    localStorage.removeItem('refreshToken');\n                    dispatch({type: SIGN_OUT});\n                    dispatch({type: SIGN_OUT_TOKEN});\n                })\n        })\n    }\n}\n","import React from 'react';\n\nclass ContentCart extends React.Component {\n\n\n    render() {\n        return (\n            <div className={this.props.class.container}>\n                <p className={this.props.class.title}>{this.props.title}</p>\n                <p className={this.props.class.content}>{this.props.content}</p>\n            </div>\n        );\n    }\n}\n\nexport default ContentCart;","import React from 'react';\nimport {connect} from 'react-redux';\nimport NavBar from \"../views/components/NavBar/NavBar\";\nimport ContentCart from \"../views/components/Home/ContentCart\";\nimport Footer from \"../views/components/Footer/Footer\";\nimport Header from \"../views/components/Header/Header\";\n\n\nclass Home extends React.Component {\n    render() {\n        const {store} = this.props;\n        let classNames = {\n            container: \"home__content--container\",\n            title: \"home__content--title\",\n            content: \"home__content--content\"\n        };\n        return (\n            <div>\n                <Header/>\n                <NavBar/>\n                <div className={'home-body'}>\n                    <div className={'home__title'}>\n                        <h3>Home page</h3>\n                    </div>\n                    <div className={'home__content'}>\n                        {\n                            (store.token.accessToken !== null) ?\n                                Object.keys(store.user).map(e => {\n                                    if (e !== 'token' && store.user[e] !== '')\n                                        return <ContentCart\n                                            key={e}\n                                            class={classNames}\n                                            title={e + ':'}\n                                            content={store.user[e]}\n                                        />;\n                                })\n                                :\n                                <ContentCart\n                                    class={classNames}\n                                    title={'Ошибка:'}\n                                    content={'Вы не авторизованы'}\n                                />\n                        }\n                    </div>\n                </div>\n                <Footer/>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = store => {\n    return {\n        store: store\n    }\n};\nexport default connect(mapStateToProps)(Home);","import React from 'react';\nimport {connect} from 'react-redux';\nimport {signOut} from \"../actions/loginAuthActions\";\nimport NavBar from \"../views/components/NavBar/NavBar\";\nimport Header from \"../views/components/Header/Header\";\nimport Footer from \"../views/components/Footer/Footer\";\n\n\nclass Authenticated extends React.Component {\n    render() {\n        const {store} = this.props;\n        return (\n            <div>\n                <Header/>\n                <NavBar/>\n                <div className=\"authenticated-body\">\n                    <div className=\"authenticated--title\">\n                        <h3>Authenticated page</h3>\n                    </div>\n                    <ul className={\"authenticated--content\"}>\n                        {\n                            Object.keys(store.user).map(e => {\n                                if (e !== 'token')\n                                    return <li key={e}>{e}: {store.user[e]}</li>;\n                                else\n                                    return false;\n                            })\n                        }\n                    </ul>\n                    <button className={\"authenticated--button\"} onClick={this.props.signOut}>Log out</button>\n                </div>\n                <Footer/>\n            </div>\n        );\n    }\n}\n\n\nconst mapStateToProps = store => {\n    return {\n        store: store\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        signOut: () => dispatch(signOut())\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Authenticated);\n","import {\n    AUTH_WITH_TOKEN_FAILED,\n    AUTH_WITH_TOKEN_SUCCESS,\n    REFRESH_TOKEN_FAILED,\n    REFRESH_TOKEN_SUCCESS,\n    RESTORE_TOKEN,\n    SIGN_OUT_TOKEN\n} from \"../constants/token\";\nimport axios from \"axios\";\nimport {store} from \"../store/configureStore\";\nimport {SIGN_IN_SUCCESS, SIGN_OUT} from \"../constants/authorization\";\nimport Fingerprint2 from 'fingerprintjs2';\n\nexport function tokenAuth() {\n    return dispatch => {\n        const tokenStore = store.getState().token;\n        Fingerprint2.getV18(fingerPrint => {\n            axios.post('/request/login/token-auth', {fingerPrint: fingerPrint},\n                {headers: {'authorization': 'Bearer ' + tokenStore.accessToken},})\n                .then(response => {\n                    if (response.status !== 200) throw new Error();\n                    dispatch({type: AUTH_WITH_TOKEN_SUCCESS});\n                    dispatch({type: SIGN_IN_SUCCESS, payload: response.data.user});\n                })\n                .catch(reason => {\n                    if (reason.request.status === 401 && tokenStore.refreshToken !== null)\n                        dispatch(refreshAccessToken(tokenAuth));\n                    else {\n                        localStorage.removeItem('accessToken');\n                        localStorage.removeItem('refreshToken');\n                        dispatch({type: AUTH_WITH_TOKEN_FAILED});\n                        dispatch({type: SIGN_OUT});\n                    }\n                });\n        });\n    }\n}\n\nexport function refreshAccessToken(action) {\n    return dispatch => {\n        const tokenStore = store.getState().token;\n        Fingerprint2.getV18(fingerPrint => {\n            axios.post('/request/login/refresh-token', {fingerPrint: fingerPrint},\n                {\n                    headers: {'authorization': 'Bearer ' + tokenStore.refreshToken}\n                })\n                .then(response => {\n                    localStorage.setItem('accessToken', response.data.accessToken);\n                    localStorage.setItem('refreshToken', response.data.refreshToken);\n                    dispatch({type: REFRESH_TOKEN_SUCCESS, payload: response.data});\n                    dispatch(action());\n                })\n                .catch(reason => {\n                    localStorage.removeItem('accessToken');\n                    localStorage.removeItem('refreshToken');\n                    dispatch({type: REFRESH_TOKEN_FAILED});\n                    dispatch({type: SIGN_OUT});\n                })\n        })\n    }\n}\n\nexport function restoreToken() {\n    return dispatch => {\n        let accessToken = localStorage.getItem('accessToken');\n        let refreshToken = localStorage.getItem('refreshToken');\n        if (accessToken !== null && refreshToken !== null) {\n            dispatch({\n                type: RESTORE_TOKEN,\n                payload: {accessToken: accessToken, refreshToken: refreshToken}\n            });\n            dispatch(tokenAuth());\n        } else {\n            localStorage.removeItem('accessToken');\n            localStorage.removeItem('refreshToken');\n            dispatch({type: SIGN_OUT});\n            dispatch({type: SIGN_OUT_TOKEN});\n        }\n    }\n}","import {\n    DELETE_USER_FAILED,\n    DELETE_USER_SUCCESS,\n    INSERT_USER_FAILED,\n    INSERT_USER_SUCCESS,\n    GET_USERS_FAILED,\n    GET_USERS_SUCCESS,\n    UPDATE_USER_FAILED,\n    UPDATE_USER_SUCCESS,\n    CHANGE_USER,\n    CLEAR_USER_DATA\n} from \"../constants/users\";\nimport axios from \"axios\";\nimport {store} from \"../store/configureStore\";\nimport {refreshAccessToken} from \"./tokenAuthActions\";\n\nexport function changeUser(id) {\n    return ({\n        type: CHANGE_USER,\n        payload: id\n    });\n}\n\nexport function clearUser() {\n    return ({type: CLEAR_USER_DATA});\n}\n\nexport function getUsers() {\n    return dispatch => {\n        const token = store.getState().token.accessToken;\n        axios.post('/request/user/get', {}, {headers: {'authorization': 'Bearer ' + token}})\n            .then(response => dispatch({type: GET_USERS_SUCCESS, payload: response.data.users}))\n            .catch(reason => {\n                if (reason.request.status === 401)\n                    dispatch(refreshAccessToken(getUsers));\n                else\n                    dispatch({type: GET_USERS_FAILED});\n            })\n    }\n}\n\n\nexport function insertUser() {\n    return dispatch => {\n        const token = store.getState().token.accessToken;\n        const usersStore = store.getState().users;\n        axios.post('/request/user/insert',\n            {user: usersStore.user},\n            {headers: {'authorization': 'Bearer ' + token}}\n        )\n            .then(response => {\n                dispatch({type: INSERT_USER_SUCCESS, payload: response.data.users});\n                dispatch({type: CLEAR_USER_DATA});\n            })\n            .catch(reason => {\n                if (reason.request.status === 401)\n                    dispatch(refreshAccessToken(insertUser));\n                else\n                    dispatch({type: INSERT_USER_FAILED});\n            })\n    }\n}\n\nexport function updateUser() {\n    return dispatch => {\n        const token = store.getState().token.accessToken;\n        const usersStore = store.getState().users;\n        axios.post('/request/user/update',\n            {user: usersStore.user},\n            {headers: {'authorization': 'Bearer ' + token}}\n        )\n            .then(response => {\n                dispatch({type: UPDATE_USER_SUCCESS, payload: response.data.users});\n                dispatch({type: CLEAR_USER_DATA});\n                dispatch(changeUser(null));\n            })\n            .catch(reason => {\n                if (reason.request.status === 401)\n                    dispatch(refreshAccessToken(updateUser));\n                else\n                    dispatch({type: UPDATE_USER_FAILED});\n            })\n    }\n}\n\nexport function deleteUser() {\n    return dispatch => {\n        const token = store.getState().token.accessToken;\n        const usersStore = store.getState().users;\n        axios.post('/request/user/delete',\n            {id: usersStore.selectedId},\n            {headers: {'authorization': 'Bearer ' + token}}\n        )\n            .then(response => {\n                dispatch({type: DELETE_USER_SUCCESS, payload: response.data.users});\n                dispatch(changeUser(null));\n            })\n            .catch(reason => {\n                if (reason.request.status === 401)\n                    dispatch(refreshAccessToken(deleteUser));\n                else\n                    dispatch({type: DELETE_USER_FAILED});\n            })\n    }\n}\n","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {deleteUser, insertUser, updateUser} from \"../../../actions/usersActions\";\n\n\nclass ControlPanel extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.onInsertUser = this.onInsertUser.bind(this);\n        this.onUpdateUser = this.onUpdateUser.bind(this);\n        this.onDeleteUser = this.onDeleteUser.bind(this);\n    }\n\n    onInsertUser(e) {\n\n    }\n\n    onUpdateUser(e) {\n\n    }\n\n    onDeleteUser(e) {\n\n    }\n\n    render() {\n        return (\n            <div className=\"users__control-panel--container\">\n                <button className=\"users__control-panel--btn\" onClick={this.onInsertUser}>Добавить</button>\n                <button className=\"users__control-panel--btn\" onClick={this.onUpdateUser}>Изменить</button>\n                <button className=\"users__control-panel--btn\" onClick={this.onDeleteUser}>Удалить</button>\n            </div>\n        );\n    }\n}\n\nControlPanel.propsTypes = {\n    user: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = store => {\n    return {\n        store: store.userList\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        insertUser:()=>dispatch(insertUser()),\n        deleteUser:()=>dispatch(deleteUser()),\n        updateUser:()=>dispatch(updateUser()),\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ControlPanel);","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport {NavLink} from \"react-router-dom\";\n\n\nclass User extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.onSelect=this.onSelect.bind(this);\n    }\n\n    onSelect(e){\n        e.preventDefault();\n        this.props.select(this.props.user.id);\n    }\n\n\n    render() {\n        const user = this.props.user;\n        return (\n            <NavLink to={''} onClick={this.onSelect} className=\"users__list--item-container\" activeClassName={'users__list--item--container__active'}>\n                {\n                    Object.keys(user).map(e => {\n                        return <p className=\"users__list--item-content\" key={e}>{user[e]}</p>\n                    })\n                }\n            </NavLink>\n        );\n    }\n}\n\nUser.propsTypes = {\n    user: PropTypes.object.isRequired,\n    select: PropTypes.func.isRequired\n};\n\n\nexport default User;","import React from 'react';\nimport {connect} from 'react-redux';\nimport NavBar from \"../views/components/NavBar/NavBar\";\nimport Header from \"../views/components/Header/Header\";\nimport Footer from \"../views/components/Footer/Footer\";\nimport ControlPanel from \"../views/components/Users/ControlPanel\";\nimport PropTypes from 'prop-types';\nimport {changeUser, getUsers} from \"../actions/usersActions\";\nimport User from \"../views/components/Users/User\";\n\n\nclass UsersList extends React.Component {\n    componentDidMount() {\n        this.props.getUsers();\n    }\n\n    render() {\n        const users = this.props.store.users;\n        return (\n            <div>\n                <Header/>\n                <NavBar/>\n                {\n                    (users.length > 0) ?\n                        <div className=\"users-body\">\n                            <ControlPanel user={users[0]}/>\n                            <div className=\"users__list-header\">\n                                {\n                                    Object.keys(users[0]).map(e => {\n                                        return <p className=\"users__list-header--title\" key={e}>{e}</p>\n                                    })\n                                }\n                            </div>\n                            {\n                                users.map(e => {\n                                    return <User user={e} key={e.id} select={this.props.selectUser}/>\n                                })\n                            }\n                        </div> :\n                        <div style={{height: '100%', width: '100%',display:'flex'}}>\n                            <h1 style={{color: \"black\", margin: \"auto\"}}>EMPTY RESULT</h1>\n                        </div>\n                }\n\n                <Footer/>\n            </div>\n        );\n    }\n}\n\nUsersList.propTypes = {\n    store: PropTypes.object.isRequired,\n    selectUser: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = store => {\n    return {\n        store: store.userList\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        getUsers: () => dispatch(getUsers()),\n        selectUser: id => dispatch(changeUser(id)),\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersList);","import {Redirect, Route, Switch} from 'react-router-dom';\nimport React from \"react\";\nimport {connect} from \"react-redux\";\nimport Authorization from \"../containers/Authorization\";\nimport Home from \"../containers/Home\";\nimport Authenticated from \"../containers/Authenticated\";\nimport PropTypes from 'prop-types';\nimport UserList from \"../containers/UsersList\";\n\n\nclass Routes extends React.Component {\n    render() {\n        const accessToken = this.props.token.accessToken;\n        return (\n            <Switch>\n                <Route path={\"/\"} exact component={Home}/>\n                {\n                    (accessToken !== null) ?\n                        <Redirect from={\"/login\"} to={\"/authenticated\"}/> :\n                        <Redirect from={\"/authenticated\"} to={\"/login\"}/>\n                }\n                {\n                    accessToken === null &&\n                    <Redirect from={\"/users\"} to={\"/login\"}/>\n                }\n                <Route path={\"/login\"} component={Authorization}/>\n                <Route path={\"/authenticated\"} component={Authenticated}/>\n                <Route path={\"/users\"} component={UserList}/>\n            </Switch>\n        );\n    }\n}\n\nRoutes.propTypes = {\n    token: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = store => {\n    return {\n        token: store.token\n    }\n};\n\nexport default connect(mapStateToProps)(Routes);","import React from 'react';\nimport {connect} from 'react-redux';\nimport {BrowserRouter} from \"react-router-dom\";\nimport Routes from \"../routes\";\nimport PropTypes from \"prop-types\";\nimport {restoreToken} from \"../actions/tokenAuthActions\";\n\n\nclass App extends React.Component {\n    componentDidMount() {\n        const token=this.props.token;\n        if (token.accessToken === null && token.refreshToken === null)\n            this.props.restoreToken();\n    }\n\n    render() {\n        return (\n            <BrowserRouter>\n                <Routes/>\n            </BrowserRouter>\n        );\n    }\n}\n\nApp.propsTypes = {\n    user: PropTypes.object.isRequired\n};\nconst mapStateToProps = store => {\n    return {\n        user: store.user,\n        token: store.token\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        restoreToken: () => dispatch(restoreToken())\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sass/index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./containers/App\";\nimport {store} from \"./store/configureStore\";\nimport {Provider} from \"react-redux\";\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n//\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["serviceWorker.js","views/components/Authenticated/InputLogin.jsx","views/components/Authenticated/InputPassword.jsx","constants/authorization.js","reducers/loginAuthReducer.js","constants/users.js","reducers/usersReducer.js","constants/token.js","reducers/tokenAuthReducer.js","reducers/rootReducer.js","store/configureStore.js","middlewares/accessTokenMiddleware.js","actions/tokenAuthActions.js","views/components/NavBar/NavBarLink.jsx","views/components/NavBar/NavBar.jsx","views/components/Header/Header.jsx","views/components/Footer/Footer.jsx","containers/Authorization.jsx","actions/loginAuthActions.js","views/components/Home/ContentCart.jsx","containers/Home.jsx","containers/Authenticated.jsx","views/components/Users/ControlPanel.jsx","actions/usersActions.js","views/components/Users/User.jsx","containers/UsersList.jsx","routes/index.jsx","containers/App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","InputLogin","props","onChange","bind","e","this","setValue","target","value","className","class","htmlFor","type","id","name","placeholder","login","autoComplete","React","Component","InputPassword","password","CHANGE_LOGIN","CHANGE_PASSWORD","SIGN_IN_SUCCESS","SIGN_IN_REQUEST","SIGN_IN_FAILED","SIGN_OUT","initialState","role","isFetching","message","CLEAR_USER_DATA","GET_USERS_REQUEST","GET_USERS_SUCCESS","GET_USERS_FAILED","CHANGE_USER","INSERT_USER_REQUEST","INSERT_USER_SUCCESS","INSERT_USER_FAILED","UPDATE_USER_REQUEST","UPDATE_USER_SUCCESS","UPDATE_USER_FAILED","DELETE_USER_REQUEST","DELETE_USER_SUCCESS","DELETE_USER_FAILED","selectedId","users","user","email","firstName","lastName","SIGN_OUT_TOKEN","RESTORE_TOKEN","CLEAR_TOKEN_DATA","SET_TOKENS","AUTH_WITH_TOKEN_REQUEST","AUTH_WITH_TOKEN_SUCCESS","AUTH_WITH_TOKEN_FAILED","REFRESH_TOKEN_REQUEST","REFRESH_TOKEN_SUCCESS","REFRESH_TOKEN_FAILED","accessToken","refreshToken","accessExpiresIn","rootReducer","combineReducers","state","action","Object","assign","payload","tokenAuth","store","createStore","applyMiddleware","next","alert","tokenStore","getState","time","Math","floor","Date","getTime","console","log","thunk","logger","loginWithToken","dispatch","nowTime","axios","post","headers","then","response","status","Error","data","catch","reason","refreshAccessToken","localStorage","removeItem","decodeAccessToken","JSON","parse","atob","split","restoreToken","getItem","NavBarLink","exact","activeClassName","to","link","NavBar","Header","src","alt","Footer","Authorization","handleSubmit","preventDefault","signIn","setLogin","setPassword","onSubmit","propsTypes","PropTypes","bool","isRequired","string","func","connect","changeLogin","changePassword","authStore","Fingerprint","getV18","fingerPrint","setItem","ContentCart","container","title","content","Home","classNames","token","keys","map","key","Authenticated","check","interval","setInterval","tokenTime","authorization","toLocaleTimeString","clearInterval","onClick","signOut","ControlPanel","onInsertUser","onUpdateUser","onDeleteUser","object","insertUser","changeUser","getUsers","User","onSelect","select","UsersList","length","selectUser","style","height","width","display","color","margin","Routes","path","component","from","UserList","App","bearerToken","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b04a62ec.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types'\n\nclass InputLogin extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(e) {\n        this.props.setValue(e.target.value);\n    }\n\n    render() {\n        return (\n            <div className={'block'+this.props.class}>\n                <label htmlFor=\"login\" className={'label'+this.props.class}>Login</label>\n                <input type=\"text\"\n                       id={\"login\"}\n                       name={\"login\"}\n                       className={'input'+this.props.class}\n                       onChange={this.onChange}\n                       placeholder={this.props.login}\n                       autoComplete={'false'}\n                />\n            </div>\n        );\n    }\n\n}\n\nInputLogin.propTypes = {\n    login: PropTypes.string,\n    class: PropTypes.string.isRequired\n};\n\nexport default InputLogin;","import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nclass InputPassword extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(e) {\n        this.props.setValue(e.target.value);\n    }\n\n    render() {\n        return (\n            <div className={'block'+this.props.class}>\n                <label htmlFor=\"password\" className={'label'+this.props.class}>Password</label>\n                <input type=\"password\"\n                       id={\"password\"}\n                       name={\"password\"}\n                       className={'input'+this.props.class}\n                       onChange={this.onChange}\n                       placeholder={this.props.password}\n                       autoComplete={'false'}\n                />\n            </div>\n        );\n    }\n\n}\n\nInputPassword.propTypes = {\n    password: PropTypes.string,\n    class:PropTypes.string.isRequired\n};\n\nexport default InputPassword;","export const CHANGE_LOGIN = \"CHANGE_LOGIN\";\nexport const CHANGE_PASSWORD = \"CHANGE_PASSWORD\";\nexport const SIGN_IN_SUCCESS = \"SIGN_IN_SUCCESS\";\nexport const SIGN_IN_REQUEST = \"SIGN_IN_REQUEST\";\nexport const SIGN_IN_FAILED = \"SIGN_IN_FAILED\";\nexport const SIGN_OUT = \"SIGN_OUT\";\nexport const TEST=\"TEST\";","import {\n    CHANGE_LOGIN,\n    CHANGE_PASSWORD,\n    SIGN_IN_FAILED,\n    SIGN_IN_REQUEST,\n    SIGN_IN_SUCCESS,\n    SIGN_OUT,\n} from \"../constants/authorization\";\n\nconst initialState = {\n    id: null,\n    role:0,\n    login: \"\",\n    password: \"\",\n    isFetching: false,\n    message: \"\"\n};\n\nexport function loginAuthReducer(state = initialState, action) {\n    switch (action.type) {\n        case CHANGE_LOGIN:\n            return Object.assign({}, state, {login: action.payload});\n        case CHANGE_PASSWORD:\n            return Object.assign({}, state, {password: action.payload});\n        case SIGN_IN_REQUEST:\n            return Object.assign({}, state, {isFetching: true});\n        case SIGN_IN_SUCCESS:\n            return Object.assign({}, state, action.payload, {password: \"\", isFetching: false});\n        case SIGN_IN_FAILED:\n            return Object.assign({}, state, action.payload, {isFetching: false});\n        case SIGN_OUT:\n            return Object.assign({}, initialState);\n        default:\n            return state;\n    }\n}","export const CLEAR_USER_DATA = \"CLEAR_USER_DATA\";\nexport const GET_USERS_REQUEST = \"GET_USERS_REQUEST\";\nexport const GET_USERS_SUCCESS = \"GET_USERS_SUCCESS\";\nexport const GET_USERS_FAILED = \"GET_USERS_FAILED\";\nexport const CHANGE_USER = \"CHANGE_USER\";\nexport const INSERT_USER_REQUEST = \"INSERT_USER_REQUEST\";\nexport const INSERT_USER_SUCCESS = \"INSERT_USER_SUCCESS\";\nexport const INSERT_USER_FAILED = \"INSERT_USER_FAILED\";\nexport const UPDATE_USER_REQUEST = \"UPDATE_USER_REQUEST\";\nexport const UPDATE_USER_SUCCESS = \"UPDATE_USER_SUCCESS\";\nexport const UPDATE_USER_FAILED = \"UPDATE_USER_FAILED\";\nexport const DELETE_USER_REQUEST = \"DELETE_USER_REQUEST\";\nexport const DELETE_USER_SUCCESS = \"DELETE_USER_SUCCESS\";\nexport const DELETE_USER_FAILED = \"DELETE_USER_FAILED\";","import {\n    CHANGE_USER, CLEAR_USER_DATA,\n    DELETE_USER_FAILED,\n    DELETE_USER_REQUEST,\n    DELETE_USER_SUCCESS,\n    GET_USERS_FAILED,\n    GET_USERS_REQUEST,\n    GET_USERS_SUCCESS,\n    INSERT_USER_FAILED,\n    INSERT_USER_REQUEST,\n    INSERT_USER_SUCCESS,\n    UPDATE_USER_FAILED,\n    UPDATE_USER_REQUEST,\n    UPDATE_USER_SUCCESS\n} from \"../constants/users\";\n\nconst initialState = {\n    selectedId: null,\n    users: [],\n    isFetching: false,\n    message: \"\",\n    user: {\n        login: \"\",\n        password: \"\",\n        email: \"\",\n        firstName: \"\",\n        lastName: \"\"\n    }\n};\n\nexport function usersReducer(state = initialState, action) {\n    switch (action.type) {\n        case CHANGE_USER:\n            return Object.assign({}, state, {selectedId: action.payload});\n        case CLEAR_USER_DATA:\n            return Object.assign({}, state, {user: initialState.user});\n        case GET_USERS_REQUEST:\n            return Object.assign({}, state, {isFetching: true, message: \"Запрос на получение данных\"});\n        case INSERT_USER_REQUEST:\n            return Object.assign({}, state, {isFetching: true, message: \"Запрос на добавление\"});\n        case UPDATE_USER_REQUEST:\n            return Object.assign({}, state, {isFetching: true, message: \"Запрос на изменение\"});\n        case DELETE_USER_REQUEST:\n            return Object.assign({}, state, {isFetching: true, message: \"Запрос на удаление\"});\n        case GET_USERS_SUCCESS:\n            return Object.assign({}, state, {users: action.payload});\n        case INSERT_USER_SUCCESS:\n            return Object.assign({}, state, {\n                users: action.payload,\n                isFetching: true,\n                message: \"Успешное добавление\"\n            });\n        case UPDATE_USER_SUCCESS:\n            return Object.assign({}, state, {\n                users: action.payload,\n                isFetching: true,\n                message: \"Успешное изменение\"\n            });\n        case DELETE_USER_SUCCESS:\n            return Object.assign({}, state, {\n                users: action.payload,\n                isFetching: true,\n                message: \"Успешное удаление\"\n            });\n        case INSERT_USER_FAILED:\n        case UPDATE_USER_FAILED:\n        case DELETE_USER_FAILED:\n        case GET_USERS_FAILED:\n            return Object.assign({}, state, {\n                isFetching: true,\n                message: action.message,\n                users: []\n            });\n        default:\n            return state;\n    }\n}","//sign out\nexport const SIGN_OUT_TOKEN = \"SIGN_OUT_TOKEN\";\n//restore token\nexport const RESTORE_TOKEN = \"RESTORE_TOKEN\";\nexport const CLEAR_TOKEN_DATA=\"CLEAR_TOKEN_DATA\";\nexport const SET_TOKENS = \"SET_TOKENS\";\n//auth with access token\nexport const AUTH_WITH_TOKEN_REQUEST = \"AUTH_WITH_TOKEN_REQUEST\";\nexport const AUTH_WITH_TOKEN_SUCCESS = \"AUTH_WITH_TOKEN_SUCCESS\";\nexport const AUTH_WITH_TOKEN_FAILED = \"AUTH_WITH_TOKEN_FAILED\";\n//try to get Access Token\nexport const REFRESH_TOKEN_REQUEST = \"REFRESH_TOKEN_REQUEST\";\nexport const REFRESH_TOKEN_SUCCESS = \"REFRESH_TOKEN_SUCCESS\";\nexport const REFRESH_TOKEN_FAILED = \"REFRESH_TOKEN_FAILED\";","import {\n    AUTH_WITH_TOKEN_FAILED,\n    AUTH_WITH_TOKEN_REQUEST,\n    AUTH_WITH_TOKEN_SUCCESS,\n    REFRESH_TOKEN_FAILED,\n    REFRESH_TOKEN_REQUEST,\n    REFRESH_TOKEN_SUCCESS,\n    RESTORE_TOKEN,\n    CLEAR_TOKEN_DATA,\n    SET_TOKENS,\n    SIGN_OUT_TOKEN\n} from \"../constants/token\";\n\n\nconst initialState = {\n    accessToken: null,\n    refreshToken: null,\n    accessExpiresIn: 0,\n    isFetching: false,\n    message: \"\"\n};\n\nexport function tokenAuthReducer(state = initialState, action) {\n    switch (action.type) {\n        case SIGN_OUT_TOKEN:\n            return Object.assign({},initialState);\n        case SET_TOKENS:\n            return Object.assign({},state,action.payload);\n        case CLEAR_TOKEN_DATA:\n            return Object.assign({},initialState);\n        case RESTORE_TOKEN:\n            return Object.assign({}, state, action.payload);\n        case AUTH_WITH_TOKEN_REQUEST:\n            return Object.assign({}, state, action.payload, {isFetching: true, message: \"token auth request\"});\n        case AUTH_WITH_TOKEN_SUCCESS:\n            return Object.assign({}, state, action.payload, {isFetching: false, message: \"token auth success\"});\n        case AUTH_WITH_TOKEN_FAILED:\n            return Object.assign({}, initialState, {message: \"token auth failed\"});\n        case REFRESH_TOKEN_REQUEST:\n            return Object.assign({}, state, action.payload, {isFetching: true, message: \"refresh token request\"});\n        case REFRESH_TOKEN_SUCCESS:\n            return Object.assign({}, state, action.payload, {isFetching: false, message: \"refresh token success\"});\n        case REFRESH_TOKEN_FAILED:\n            return Object.assign({}, initialState, {message: \"refresh token failed\"});\n        default:\n            return state;\n    }\n}","import {combineReducers} from \"redux\";\nimport {loginAuthReducer} from \"./loginAuthReducer\";\nimport {usersReducer} from \"./usersReducer\";\nimport {tokenAuthReducer} from \"./tokenAuthReducer\";\n\n\nexport const rootReducer = combineReducers({\n    user: loginAuthReducer,\n    tokenAuth: tokenAuthReducer,\n    users: usersReducer\n});\n","import {createStore, applyMiddleware} from 'redux'\nimport {rootReducer} from \"../reducers/rootReducer\";\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport {helloMiddleware} from \"../middlewares/accessTokenMiddleware\";\n\n\n\n\n\n\n\nexport const store = createStore(rootReducer, applyMiddleware(helloMiddleware,thunk ,logger));\n\n\n\n\n","import {GET_USERS_REQUEST} from \"../constants/users\";\n\nexport const helloMiddleware = store => next => action => {\n    if (action.type === GET_USERS_REQUEST) {\n        alert(GET_USERS_REQUEST);\n        let tokenStore = store.getState().tokenAuth;\n        let time = Math.floor(new Date().getTime() / 1000);\n        if (tokenStore.accessExpiresIn <= time) {\n            //store.dispatch(refreshAccessToken(user.refreshToken, next, action));\n            next(action);\n        }\n        else {\n            console.log('токен еще валидный');\n            next(action);\n        }\n    } else {\n        console.log('Не тот action');\n        next(action);\n    }\n};","import {\n    AUTH_WITH_TOKEN_FAILED,\n    AUTH_WITH_TOKEN_REQUEST,\n    AUTH_WITH_TOKEN_SUCCESS, REFRESH_TOKEN_FAILED,\n    REFRESH_TOKEN_REQUEST, REFRESH_TOKEN_SUCCESS, RESTORE_TOKEN,CLEAR_TOKEN_DATA\n} from \"../constants/token\";\nimport axios from \"axios\";\nimport {store} from \"../store/configureStore\";\nimport {SIGN_IN_SUCCESS, SIGN_OUT} from \"../constants/authorization\";\nimport {CLEAR_USER_DATA} from \"../constants/users\";\n\nexport function loginWithToken() {\n    return dispatch => {\n        //Change store before async request\n        dispatch({\n            type: AUTH_WITH_TOKEN_REQUEST\n        });\n        const tokenStore = store.getState().tokenAuth;\n        const nowTime = Math.floor(new Date().getTime() / 1000);\n        //if token valid\n        if (tokenStore.accessToken !== null) {\n            if (nowTime <= tokenStore.accessExpiresIn)\n                axios.post(\n                    '/request/login/token-auth',\n                    {},\n                    {headers: {'authorization': 'Bearer ' + tokenStore.accessToken}})\n                    .then(response => {\n                        if (response.status === 200) {\n                            dispatch({type: AUTH_WITH_TOKEN_SUCCESS});\n                            dispatch({type: SIGN_IN_SUCCESS, payload: response.data.user});\n                        } else\n                            throw new Error();\n                    })\n                    .catch(reason => {\n                        if (reason.status === 401) {\n                            dispatch({type: AUTH_WITH_TOKEN_FAILED});\n                            refreshAccessToken(loginWithToken);\n                        } else\n                            dispatch({type: AUTH_WITH_TOKEN_FAILED});\n                    });\n            else {\n                dispatch({type: AUTH_WITH_TOKEN_FAILED});\n                refreshAccessToken(loginWithToken);\n            }\n        }\n        //clear token and localstorage\n        else {\n            localStorage.removeItem('accessToken');\n            localStorage.removeItem('refreshToken');\n            dispatch({type: AUTH_WITH_TOKEN_FAILED});\n        }\n    }\n}\n\nexport function refreshAccessToken(action) {\n    return dispatch => {\n        const tokenStore = store.getState().tokenAuth;\n        const decodeAccessToken = JSON.parse(atob(tokenStore.accessToken.split('.')[1]));\n        if (tokenStore.refreshToken !== null) {\n            dispatch({\n                type: REFRESH_TOKEN_REQUEST\n            });\n            axios.post('/request/login/refresh-token', {}, {\n                headers: {\n                    'refresh': 'Bearer ' + tokenStore.refreshToken,\n                    'userId': decodeAccessToken.id\n                }\n            })\n                .then(response => {\n                    if (response.status === 200) {\n                        dispatch({type: REFRESH_TOKEN_SUCCESS, payload: response.data});\n                        dispatch(action());\n                    } else\n                        throw new Error();\n                })\n                .catch(reason => {\n                    if (reason.status === 401) {\n                        localStorage.removeItem('accessToken');\n                        localStorage.removeItem('refreshToken');\n                        dispatch({type: REFRESH_TOKEN_FAILED});\n                        dispatch({type: SIGN_OUT});\n                    } else\n                        dispatch({type: REFRESH_TOKEN_FAILED});\n                });\n        } else {\n            localStorage.removeItem('accessToken');\n            localStorage.removeItem('refreshToken');\n            dispatch({type: REFRESH_TOKEN_FAILED});\n            dispatch({type: SIGN_OUT});\n        }\n    }\n}\n\nexport function restoreToken() {\n    return dispatch => {\n        let accessToken = localStorage.getItem('accessToken');\n        let refreshToken = localStorage.getItem('refreshToken');\n        if (accessToken !== null && refreshToken !== null) {\n            dispatch({\n                type: RESTORE_TOKEN,\n                payload: {accessToken: accessToken, refreshToken: refreshToken}\n            });\n            dispatch(loginWithToken());\n        } else {\n            dispatch({type: CLEAR_USER_DATA});\n            dispatch({type: CLEAR_TOKEN_DATA});\n        }\n    }\n}","import React from 'react';\nimport {NavLink} from \"react-router-dom\";\n\nclass NavBarLink extends React.Component {\n\n\n    render() {\n        return (\n            <NavLink\n                exact={this.props.exact}\n                className={\"nav__link\"}\n                activeClassName={\"nav__link__active\"}\n                to={this.props.link}\n            >\n                {this.props.name}\n            </NavLink>\n        );\n    }\n}\n\n\nexport default NavBarLink;","import React from 'react';\nimport NavBarLink from \"./NavBarLink\";\n\nclass NavBar extends React.Component{\n\n    render() {\n        return(\n            <nav className={'nav-bar'}>\n                <div className={'nav-bar__container'}>\n                <NavBarLink exact={true} link={\"/\"} name={\"Home page\"}/>\n                <NavBarLink link={\"/login\"} name={\"Login\"}/>\n                <NavBarLink link={\"/authenticated\"} name={\"Authenticated\"}/>\n                <NavBarLink link={\"/users\"} name={\"User list\"}/>\n                </div>\n            </nav>\n        );\n    }\n}\n\nexport default NavBar;","import React from 'react';\n\nclass Header extends React.Component{\n    render() {\n        return(\n            <div className={'header'}>\n                <img src=\"/react-gif.gif\" alt=\"\"/>\n            </div>\n        );\n    }\n}\n\nexport default Header;","import React from 'react';\n\nclass Footer extends React.Component{\n    render() {\n        return(\n            <footer className={'footer'}>\n                <div className=\"footer--logo\">\n                    <img src=\"/logo192.png\" alt=\"\"/>\n                </div>\n                <div className=\"footer--content\">\n                    <p>&#169; design by Infernet</p>\n                </div>\n            </footer>\n        );\n    }\n}\n\nexport default Footer;","import React from 'react';\nimport InputLogin from \"../views/components/Authenticated/InputLogin\";\nimport InputPassword from \"../views/components/Authenticated/InputPassword\";\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {changeLogin, changePassword, signIn} from \"../actions/loginAuthActions\";\nimport NavBar from \"../views/components/NavBar/NavBar\";\nimport Header from \"../views/components/Header/Header\";\nimport Footer from \"../views/components/Footer/Footer\";\n\nclass Authorization extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        this.props.signIn({\n            login: this.props.login,\n            password: this.props.password\n        });\n\n    }\n\n    render() {\n        const {setLogin, setPassword, login, password, isFetching, message} = this.props;\n        return (\n            <div>\n                <Header/>\n                <NavBar/>\n                <div className=\"authorization-body\">\n                    <div className=\"authorization__title\">\n                        <h3>Login Page</h3>\n                    </div>\n                    <div className=\"authorization__content\">\n                        <form className={'authorization__content--form'} onSubmit={this.handleSubmit}>\n\n                            <InputLogin login={login} setValue={setLogin} class={'Login'}/>\n                            <InputPassword password={password} class={'Password'} setValue={setPassword}/>\n                            <button type=\"submit\">sign in</button>\n                        </form>\n                        <div className=\"authorization__content--status\">\n                            <p>Login: {login}</p>\n                            <p>Password: {password}</p>\n                            {\n                                (isFetching) ? <p>Отправка на Node.js...</p> :\n                                    <p>{message}</p>\n                            }\n                        </div>\n                    </div>\n                </div>\n                <Footer/>\n            </div>\n        );\n    }\n}\n\n\nAuthorization.propsTypes = {\n    isFetching: PropTypes.bool.isRequired,\n    message: PropTypes.string,\n    login: PropTypes.string.isRequired,\n    password: PropTypes.string.isRequired,\n    setLogin: PropTypes.func.isRequired,\n    setPassword: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = store => {\n    console.log(store);\n    return {\n        login: store.user.login,\n        password: store.user.password,\n        isFetching: store.user.isFetching,\n        message: store.user.message\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        setLogin: login => dispatch(changeLogin(login)),\n        setPassword: password => dispatch(changePassword(password)),\n        signIn: data => dispatch(signIn(data))\n    }\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Authorization);\n","import {\n    CHANGE_LOGIN,\n    CHANGE_PASSWORD,\n    SIGN_IN_FAILED,\n    SIGN_IN_REQUEST,\n    SIGN_IN_SUCCESS,\n    SIGN_OUT\n} from \"../constants/authorization\";\nimport axios from \"axios\";\nimport Fingerprint from \"fingerprintjs2\";\nimport {store} from \"../store/configureStore\";\nimport {SET_TOKENS, SIGN_OUT_TOKEN} from \"../constants/token\";\nimport {refreshAccessToken} from \"./tokenAuthActions\";\n\nexport function changeLogin(login) {\n    return {\n        type: CHANGE_LOGIN,\n        payload: login\n    }\n}\n\nexport function changePassword(password) {\n    return {\n        type: CHANGE_PASSWORD,\n        payload: password\n    }\n}\n\nexport function signIn() {\n    return dispatch => {\n        dispatch({\n            type: SIGN_IN_REQUEST\n        });\n        const authStore = store.getState().user;\n        Fingerprint.getV18()\n            .then(fingerPrint => {\n                axios.post('/request/login/login-auth', {\n                    login: authStore.login,\n                    password: authStore.password,\n                    fingerPrint: fingerPrint\n                })\n                    .then(response => {\n                        if (response.status === 200) {\n                            localStorage.setItem('accessToken', response.data.accessToken);\n                            localStorage.setItem('refreshToken', response.data.refreshToken);\n                            dispatch({\n                                type: SIGN_IN_SUCCESS,\n                                payload: {\n                                    id: response.data.id,\n                                    login: response.data.login,\n                                    role: response.data.role\n                                }\n                            });\n                            dispatch({\n                                type: SET_TOKENS,\n                                payload: {\n                                    accessToken: response.data.accessToken,\n                                    refreshToken: response.data.refreshToken,\n                                    accessExpiresIn: response.data.accessExpiresIn\n                                }\n                            });\n                        }\n                    })\n                    .catch(reason => dispatch({type: SIGN_IN_FAILED}));\n            })\n            .catch(reason => {\n                dispatch({type: SIGN_IN_FAILED});\n            });\n    }\n}\n\nexport function signOut() {\n    return dispatch => {\n        localStorage.removeItem('accessToken');\n        localStorage.removeItem('refreshToken');\n        const tokenStore=store.getState().tokenAuth;\n        axios.post(\n            '/request/login/sign-out',\n            {},\n            {\n                headers: {\n                    'access': 'Bearer ' + tokenStore.accessToken,\n                    'refresh': 'Bearer ' + tokenStore.refreshToken\n                }\n            })\n            .then(response => {\n                if (response.status === 200) {\n                    dispatch({type: SIGN_OUT});\n                    dispatch({type: SIGN_OUT_TOKEN});\n                } else\n                    throw new Error();\n            })\n            .catch(reason => {\n                if (reason.status === 401)\n                    dispatch(refreshAccessToken(signOut()));\n                else {\n                    dispatch({type: SIGN_OUT});\n                    dispatch({type: SIGN_OUT_TOKEN});\n                }\n            })\n\n    };\n\n\n}\n","import React from 'react';\n\nclass ContentCart extends React.Component {\n\n\n    render() {\n        return (\n            <div className={this.props.class.container}>\n                <p className={this.props.class.title}>{this.props.title}</p>\n                <p className={this.props.class.content}>{this.props.content}</p>\n            </div>\n        );\n    }\n}\n\nexport default ContentCart;","import React from 'react';\nimport {connect} from 'react-redux';\nimport NavBar from \"../views/components/NavBar/NavBar\";\nimport ContentCart from \"../views/components/Home/ContentCart\";\nimport Footer from \"../views/components/Footer/Footer\";\nimport Header from \"../views/components/Header/Header\";\n\n\nclass Home extends React.Component {\n    render() {\n        const {store} = this.props;\n        let classNames = {\n            container: \"home__content--container\",\n            title: \"home__content--title\",\n            content: \"home__content--content\"\n        };\n        return (\n            <div>\n                <Header/>\n                <NavBar/>\n                <div className={'home-body'}>\n                    <div className={'home__title'}>\n                        <h3>Home page</h3>\n                    </div>\n                    <div className={'home__content'}>\n                        {\n                            (store.tokenAuth.token !== null) ?\n                                Object.keys(store.user).map(e => {\n                                    if (e !== 'token' && store.user[e] !== '')\n                                        return <ContentCart\n                                            key={e}\n                                            class={classNames}\n                                            title={e + ':'}\n                                            content={store.user[e]}\n                                        />;\n                                })\n                                :\n                                <ContentCart\n                                    class={classNames}\n                                    title={'Ошибка:'}\n                                    content={'Вы не авторизованы'}\n                                />\n                        }\n                    </div>\n                </div>\n                <Footer/>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = store => {\n    return {\n        store: store\n    }\n};\nexport default connect(mapStateToProps)(Home);","import React from 'react';\nimport {connect} from 'react-redux';\nimport {signOut} from \"../actions/loginAuthActions\";\nimport NavBar from \"../views/components/NavBar/NavBar\";\nimport Header from \"../views/components/Header/Header\";\nimport Footer from \"../views/components/Footer/Footer\";\n\n\nclass Authenticated extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.check=this.check.bind(this);\n        this.interval=setInterval(this.check,1000);\n    }\n\n    check(){\n        let time=new Date().getTime()/1000;\n        let tokenTime=this.props.store.authorization.accessExpiresIn;\n        if(time>tokenTime)\n        {\n            alert('Token was broken');\n            alert(`Now time: ${new Date(time).toLocaleTimeString()}\\nToken time: ${new Date(tokenTime).toLocaleTimeString()}`);\n            clearInterval(this.interval);\n        }\n    }\n\n\n\n    render() {\n        const {store} = this.props;\n        return (\n            <div>\n                <Header/>\n                <NavBar/>\n                <div className=\"authenticated-body\">\n                    <div className=\"authenticated--title\">\n                        <h3>Authenticated page</h3>\n                    </div>\n                    <ul className={\"authenticated--content\"}>\n                        {\n                            Object.keys(store.authorization).map(e => {\n                                if (e !== 'token')\n                                    return <li key={e}>{e}: {store.authorization[e]}</li>;\n                                else\n                                    return false;\n                            })\n                        }\n                    </ul>\n                    <button className={\"authenticated--button\"} onClick={this.props.signOut}>Log out</button>\n                </div>\n                <Footer/>\n            </div>\n        );\n    }\n}\n\n\nconst mapStateToProps = store => {\n    return {\n        store: store\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        signOut: () => dispatch(signOut())\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Authenticated);\n","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {loginWithToken} from \"../../../actions/tokenAuthActions\";\n\n\nclass ControlPanel extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.onInsertUser = this.onInsertUser.bind(this);\n        this.onUpdateUser = this.onUpdateUser.bind(this);\n        this.onDeleteUser = this.onDeleteUser.bind(this);\n    }\n\n    onInsertUser(e) {\n\n    }\n\n    onUpdateUser(e) {\n\n    }\n\n    onDeleteUser(e) {\n\n    }\n\n    render() {\n        return (\n            <div className=\"users__control-panel--container\">\n                <button className=\"users__control-panel--btn\" onClick={this.onInsertUser}>Добавить</button>\n                <button className=\"users__control-panel--btn\" onClick={this.onUpdateUser}>Изменить</button>\n                <button className=\"users__control-panel--btn\" onClick={this.onDeleteUser}>Удалить</button>\n            </div>\n        );\n    }\n}\n\nControlPanel.propsTypes = {\n    user: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = store => {\n    return {\n        store: store\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        insertUser:token=>dispatch(loginWithToken(token))\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ControlPanel);","import {\n    DELETE_USER_FAILED,\n    DELETE_USER_REQUEST, DELETE_USER_SUCCESS, INSERT_USER_FAILED,\n    INSERT_USER_REQUEST, INSERT_USER_SUCCESS,\n    GET_USERS_FAILED,\n    GET_USERS_REQUEST, GET_USERS_SUCCESS, UPDATE_USER_FAILED,\n    UPDATE_USER_REQUEST, UPDATE_USER_SUCCESS, CHANGE_USER, CLEAR_USER_DATA\n} from \"../constants/users\";\nimport axios from \"axios\";\nimport {store} from \"../store/configureStore\";\nimport {refreshAccessToken} from \"./tokenAuthActions\";\n\nexport function changeUser(id) {\n    return ({\n        type: CHANGE_USER,\n        payload: id\n    });\n}\n\nexport function clearUser() {\n    return ({type: CLEAR_USER_DATA});\n}\n\nexport function getUsers() {\n    return dispatch => {\n        dispatch({\n            type: GET_USERS_REQUEST\n        });\n        const tokenStore = store.getState().tokenAuth;\n        const nowTime = Math.floor(new Date().getTime() / 1000);\n        if (nowTime < tokenStore.accessExpiresIn) {\n            axios.post('/request/user/get', {token: tokenStore.accessToken})\n                .then(response => {\n                    switch (response.status) {\n                        case 200:\n                            dispatch({type: GET_USERS_SUCCESS, payload: response.data.users});\n                            break;\n                        case 401:\n                            dispatch({type: GET_USERS_FAILED});\n                            dispatch(refreshAccessToken(getUsers));\n                            break;\n                        default:\n                            dispatch({type: GET_USERS_FAILED});\n                    }\n                })\n                .catch(reason => {\n                    if (reason.status === 401) {\n                        dispatch({type: GET_USERS_FAILED});\n                        dispatch(refreshAccessToken(getUsers));\n                    } else\n                        dispatch({type: GET_USERS_FAILED});\n                })\n        } else\n            dispatch(refreshAccessToken(getUsers));\n    }\n}\n\n\nexport function insertUser() {\n    return dispatch => {\n        dispatch({\n            type: INSERT_USER_REQUEST\n        });\n        const tokenStore = store.getState().tokenAuth;\n        const usersStore = store.getState().users;\n        const nowTime = Math.floor(new Date().getTime() / 1000);\n        if (nowTime < tokenStore.accessExpiresIn) {\n            axios.post('/request/user/insert', {token: tokenStore.accessToken, user: usersStore.user})\n                .then(response => {\n                    switch (response.status) {\n                        case 200:\n                            dispatch({type: INSERT_USER_SUCCESS, payload: response.data.users});\n                            dispatch({type:CLEAR_USER_DATA});\n                            break;\n                        case 401:\n                            dispatch({type: INSERT_USER_FAILED});\n                            dispatch(refreshAccessToken(insertUser));\n                            break;\n                        default:\n                            dispatch({type: INSERT_USER_FAILED});\n                    }\n                })\n                .catch(reason => {\n                    if (reason.status === 401) {\n                        dispatch({type: INSERT_USER_FAILED});\n                        dispatch(refreshAccessToken(insertUser));\n                    } else\n                        dispatch({type: INSERT_USER_FAILED});\n                })\n        } else\n            dispatch(refreshAccessToken(insertUser));\n    }\n}\n\nexport function updateUser() {\n    return dispatch => {\n        dispatch({\n            type: UPDATE_USER_REQUEST\n        });\n        const tokenStore = store.getState().tokenAuth;\n        const usersStore = store.getState().users;\n        const nowTime = Math.floor(new Date().getTime() / 1000);\n        if (nowTime < tokenStore.accessExpiresIn) {\n            axios.post('/request/user/update', {token: tokenStore.accessToken, user: usersStore.user})\n                .then(response => {\n                    switch (response.status) {\n                        case 200:\n                            dispatch({type: UPDATE_USER_SUCCESS, payload: response.data.users});\n                            dispatch({type:CLEAR_USER_DATA});\n                            dispatch(changeUser(null));\n                            break;\n                        case 401:\n                            dispatch({type: UPDATE_USER_FAILED});\n                            dispatch(refreshAccessToken(updateUser));\n                            break;\n                        default:\n                            dispatch({type: UPDATE_USER_FAILED});\n                    }\n                })\n                .catch(reason => {\n                    if (reason.status === 401) {\n                        dispatch({type: UPDATE_USER_FAILED});\n                        dispatch(refreshAccessToken(updateUser));\n                    } else\n                        dispatch({type: UPDATE_USER_FAILED});\n                })\n        } else\n            dispatch(refreshAccessToken(updateUser));\n    }\n}\n\nexport function deleteUser() {\n    return dispatch => {\n        dispatch({\n            type: DELETE_USER_REQUEST\n        });\n        const tokenStore = store.getState().tokenAuth;\n        const usersStore = store.getState().users;\n        const nowTime = Math.floor(new Date().getTime() / 1000);\n        if (nowTime < tokenStore.accessExpiresIn) {\n            axios.post('/request/user/delete', {token: tokenStore.accessToken, id: usersStore.selectedId})\n                .then(response => {\n                    switch (response.status) {\n                        case 200:\n                            dispatch({type: DELETE_USER_SUCCESS, payload: response.data.users});\n                            dispatch(changeUser(null));\n                            break;\n                        case 401:\n                            dispatch({type: DELETE_USER_FAILED});\n                            dispatch(refreshAccessToken(deleteUser));\n                            break;\n                        default:\n                            dispatch({type: DELETE_USER_FAILED});\n                    }\n                })\n                .catch(reason => {\n                    if (reason.status === 401) {\n                        dispatch({type: DELETE_USER_FAILED});\n                        dispatch(refreshAccessToken(deleteUser));\n                    } else\n                        dispatch({type: DELETE_USER_FAILED});\n                })\n        } else\n            dispatch(refreshAccessToken(deleteUser));\n    }\n}\n","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport {Link} from \"react-router-dom\";\n\n\nclass User extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.onSelect=this.onSelect.bind(this);\n    }\n\n    onSelect(e){\n        e.preventDefault();\n        this.props.select(this.props.user.id);\n    }\n\n\n    render() {\n        const user = this.props.user;\n        return (\n            <Link to={''} onClick={this.onSelect} className=\"users__list--item-container\">\n                {\n                    Object.keys(user).map(e => {\n                        return <p className=\"users__list--item-content\" key={e}>{user[e]}</p>\n                    })\n                }\n            </Link>\n        );\n    }\n}\n\nUser.propsTypes = {\n    user: PropTypes.object.isRequired,\n    select: PropTypes.func.isRequired\n};\n\n\nexport default User;","import React from 'react';\nimport {connect} from 'react-redux';\nimport NavBar from \"../views/components/NavBar/NavBar\";\nimport Header from \"../views/components/Header/Header\";\nimport Footer from \"../views/components/Footer/Footer\";\nimport ControlPanel from \"../views/components/Users/ControlPanel\";\nimport PropTypes from 'prop-types';\nimport {changeUser, getUsers} from \"../actions/usersActions\";\nimport User from \"../views/components/Users/User\";\n\n\nclass UsersList extends React.Component {\n    componentDidMount() {\n        this.props.getUsers();\n    }\n\n    render() {\n        const users = this.props.store.users;\n        return (\n            <div>\n                <Header/>\n                <NavBar/>\n                {\n                    (users.length > 0) ?\n                        <div className=\"users-body\">\n                            <ControlPanel user={users[0]}/>\n                            <div className=\"users__list-header\">\n                                {\n                                    Object.keys(users[0]).map(e => {\n                                        return <p className=\"users__list-header--title\" key={e}>{e}</p>\n                                    })\n                                }\n                            </div>\n                            {\n                                users.map(e => {\n                                    return <User user={e} key={e.id} select={this.props.selectUser}/>\n                                })\n                            }\n                        </div> :\n                        <div style={{height: '100%', width: '100%',display:'flex'}}>\n                            <h1 style={{color: \"black\", margin: \"auto\"}}>EMPTY RESULT</h1>\n                        </div>\n                }\n\n                <Footer/>\n            </div>\n        );\n    }\n}\n\nUsersList.propTypes = {\n    store: PropTypes.object.isRequired,\n    selectUser: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = store => {\n    return {\n        store: store.users\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        getUsers: () => dispatch(getUsers()),\n        selectUser: id => dispatch(changeUser(id)),\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersList);","import {Redirect, Route, Switch} from 'react-router-dom';\nimport React from \"react\";\nimport {connect} from \"react-redux\";\nimport Authorization from \"../containers/Authorization\";\nimport Home from \"../containers/Home\";\nimport Authenticated from \"../containers/Authenticated\";\nimport PropTypes from 'prop-types';\nimport UserList from \"../containers/UsersList\";\n\n\nclass Routes extends React.Component {\n    render() {\n        const accessToken = this.props.store.accessToken;\n        return (\n            <Switch>\n                <Route path={\"/\"} exact component={Home}/>\n                {\n                    (accessToken !== null) ?\n                        <Redirect from={\"/login\"} to={\"/authenticated\"}/> :\n                        <Redirect from={\"/authenticated\"} to={\"/login\"}/>\n                }\n                {\n                    accessToken !== null &&\n                    <Redirect from={\"/users\"} to={\"/login\"}/>\n                }\n                <Route path={\"/login\"} component={Authorization}/>\n                <Route path={\"/authenticated\"} component={Authenticated}/>\n                <Route path={\"/users\"} component={UserList}/>\n            </Switch>\n        );\n    }\n}\n\nRoutes.propTypes = {\n    store: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = store => {\n    return {\n        store: store.tokenAuth\n    }\n};\n\nexport default connect(mapStateToProps)(Routes);","import React from 'react';\nimport {connect} from 'react-redux';\nimport {BrowserRouter} from \"react-router-dom\";\nimport Routes from \"../routes\";\nimport PropTypes from \"prop-types\";\nimport {loginWithToken, restoreToken} from \"../actions/tokenAuthActions\";\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        if (this.props.tokenStore.accessToken === null && this.props.tokenStore.refreshToken === null)\n            restoreToken();\n    }\n\n    render() {\n        return (\n            <BrowserRouter>\n                <Routes/>\n            </BrowserRouter>\n        );\n    }\n}\n\nApp.propsTypes = {\n    authorization: PropTypes.object.isRequired\n};\nconst mapStateToProps = store => {\n    return {\n        authorization: store.authorization,\n        tokenStore: store.tokenAuth\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        bearerToken: token => dispatch(loginWithToken(token)),\n        restoreToken: () => dispatch(restoreToken())\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sass/index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./containers/App\";\nimport {store} from \"./store/configureStore\";\nimport {Provider} from \"react-redux\";\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n//\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
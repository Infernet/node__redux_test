{"version":3,"sources":["serviceWorker.js","views/components/NavBar/NavBarLink.jsx","views/components/NavBar/NavBar.jsx","views/components/Header/Header.jsx","views/components/Footer/Footer.jsx","containers/Home.jsx","constants/authorization.js","containers/Authenticated.jsx","actions/authorizationActions.js","views/components/Authorization/InputLogin.jsx","views/components/Authorization/InputPassword.jsx","containers/Authorization.jsx","routes/index.jsx","containers/App.jsx","reducers/authorizationReducer.js","reducers/rootReducer.js","store/configureStore.js","index.js"],"names":["Boolean","window","location","hostname","match","NavBarLink","exact","this","props","className","activeClassName","to","link","name","React","Component","NavBar","Header","src","alt","Footer","Home","store","keys","Object","authorization","map","e","key","connect","CHANGE_LOGIN","CHANGE_PASSWORD","SIGN_IN_SUCCESS","SIGN_IN_REQUEST","SIGN_IN_FAILED","SIGN_OUT","SIGN_IN_WITH_TOKEN_REQUEST","SIGN_IN_WITH_TOKEN_SUCCESS","SIGN_IN_WITH_TOKEN_FAILED","Authenticated","login","password","isFetching","message","token","localStorage","getItem","toString","onClick","signOut","dispatch","removeItem","type","InputLogin","onChange","bind","setValue","target","value","class","htmlFor","id","placeholder","InputPassword","Authorization","handleForm","preventDefault","signIn","action","method","onSubmit","setLogin","setPassword","propsTypes","PropTypes","object","isRequired","data","payload","axios","post","then","response","status","Error","setItem","catch","reason","changeLogin","changePassword","Routes","path","component","from","App","bearerToken","headers","signInWithToken","initialState","rootReducer","combineReducers","state","assign","createStore","applyMiddleware","thunk","logger","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.97893933.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nclass NavBarLink extends React.Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <NavLink\r\n                exact={this.props.exact}\r\n                className={\"nav__link\"}\r\n                activeClassName={\"nav__link__active\"}\r\n                to={this.props.link}\r\n            >\r\n                {this.props.name}\r\n            </NavLink>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default NavBarLink;","import React from 'react';\r\nimport NavBarLink from \"./NavBarLink\";\r\n\r\nclass NavBar extends React.Component{\r\n\r\n    render() {\r\n        return(\r\n            <nav className={'nav-bar'}>\r\n                <div className={'nav-bar__container'}>\r\n                <NavBarLink exact={true} link={\"/\"} name={\"Home page\"}/>\r\n                <NavBarLink link={\"/login\"} name={\"Login\"}/>\r\n                <NavBarLink link={\"/authenticated\"} name={\"Authenticated\"}/>\r\n                </div>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBar;","import React from 'react';\r\n\r\nclass Header extends React.Component{\r\n    render() {\r\n        return(\r\n            <div className={'header'}>\r\n                <img src=\"/react-gif.gif\" alt=\"\"/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nclass Footer extends React.Component{\r\n    render() {\r\n        return(\r\n            <footer className={'footer'}>\r\n                <div className=\"footer--logo\">\r\n                    <img src=\"/logo192.png\" alt=\"\"/>\r\n                </div>\r\n                <div className=\"footer--content\">\r\n                    <p>&#169; design by Infernet</p>\r\n                </div>\r\n            </footer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport NavBar from \"../views/components/NavBar/NavBar\";\r\nimport Header from \"../views/components/Header/Header\";\r\nimport Footer from \"../views/components/Footer/Footer\";\r\n\r\n\r\nclass Home extends React.Component {\r\n\r\n    render() {\r\n        const {store} = this.props;\r\n        const keys = Object.keys(this.props.store.authorization);\r\n        return (\r\n            <div>\r\n                <Header/>\r\n                <NavBar/>\r\n                <div className=\"home-body\">\r\n                    <div className=\"home__title\">\r\n                        <h3>Home page</h3>\r\n                    </div>\r\n                    <div className=\"home__content\">\r\n                        {\r\n                            keys.map((e) => {\r\n                                return <div className=\"home__content--container\" key={e}>\r\n                                    <p className=\"home__content--title\">{e}</p>\r\n                                    <p className=\"home__content--content\">{store.authorization[e]}</p>\r\n                                </div>\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <Footer/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        store: store\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(Home);\r\n","export const CHECK_TOKEN=\"CHECK_TOKEN\";\r\nexport const CHANGE_LOGIN = \"CHANGE_LOGIN\";\r\nexport const CHANGE_PASSWORD = \"CHANGE_PASSWORD\";\r\nexport const SIGN_IN_SUCCESS = \"SIGN_IN_SUCCESS\";\r\nexport const SIGN_IN_REQUEST = \"SIGN_IN_REQUEST\";\r\nexport const SIGN_IN_FAILED = \"SIGN_IN_FAILED\";\r\nexport const SIGN_OUT = \"SIGN_OUT\";\r\nexport const SIGN_IN_WITH_TOKEN_REQUEST=\"SIGN_IN_WITH_TOKEN_REQUEST\";\r\nexport const SIGN_IN_WITH_TOKEN_SUCCESS=\"SIGN_IN_WITH_TOKEN_SUCCESS\";\r\nexport const SIGN_IN_WITH_TOKEN_FAILED=\"SIGN_IN_WITH_TOKEN_FAILED\";","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {signOut} from \"../actions/authorizationActions\";\r\nimport NavBar from \"../views/components/NavBar/NavBar\";\r\nimport Header from \"../views/components/Header/Header\";\r\nimport Footer from \"../views/components/Footer/Footer\";\r\n\r\n\r\nclass Authenticated extends React.Component {\r\n\r\n    render() {\r\n        const {store} = this.props;\r\n        return (\r\n            <div>\r\n                <Header/>\r\n                <NavBar/>\r\n                <div className=\"authenticated-body\">\r\n                    <div className=\"authenticated--title\">\r\n                        <h3>Authenticated page</h3>\r\n                    </div>\r\n                    <ul className={\"authenticated--content\"}>\r\n                        <li>Login: {store.authorization.login}</li>\r\n                        <li>Password: {store.authorization.password}</li>\r\n                        <li>isFetching: {store.authorization.isFetching}</li>\r\n                        <li>Message: {store.authorization.message}</li>\r\n                        <li className={\"authenticated--content--token\"}>Token(store): {store.authorization.token}</li>\r\n                        <li className={\"authenticated--content--token\"}>Token(localstorage): {localStorage.getItem('token') ? localStorage.getItem('token').toString() : ''}</li>\r\n                    </ul>\r\n                    <button className={\"authenticated--button\"} onClick={this.props.signOut}>Log out</button>\r\n                </div>\r\n                <Footer/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        store: store\r\n    }\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        signOut: () => dispatch(signOut())\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Authenticated);\r\n","import {\r\n    CHANGE_LOGIN,\r\n    CHANGE_PASSWORD, CHECK_TOKEN,\r\n    SIGN_IN_FAILED,\r\n    SIGN_IN_REQUEST,\r\n    SIGN_IN_SUCCESS, SIGN_IN_WITH_TOKEN_FAILED, SIGN_IN_WITH_TOKEN_REQUEST, SIGN_IN_WITH_TOKEN_SUCCESS, SIGN_OUT\r\n} from \"../constants/authorization\";\r\nimport axios from \"axios\";\r\n\r\nexport function changeLogin(login) {\r\n    return {\r\n        type: CHANGE_LOGIN,\r\n        payload: login\r\n    }\r\n}\r\n\r\nexport function changePassword(password) {\r\n    return {\r\n        type: CHANGE_PASSWORD,\r\n        payload: password\r\n    }\r\n}\r\n\r\nexport function signIn(data) {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: SIGN_IN_REQUEST,\r\n            payload: data\r\n        });\r\n        // setTimeout(()=>{\r\n        //     let min=1;\r\n        //     let max=1000000;\r\n        //     let token=Math.floor(Math.random() * (max - min + 1)) + min;\r\n        //     localStorage.setItem('token',token);\r\n        //     dispatch({\r\n        //         type:SIGN_IN_SUCCESS,\r\n        //         payload:{\r\n        //             message:\"Успешная отправка\",\r\n        //             token:token+''\r\n        //         }\r\n        //     })\r\n        // },5000);\r\n        axios.post('/login', {\r\n                login: data.login,\r\n                password: data.password\r\n            }\r\n        )\r\n            .then(response => {\r\n                if (response.status !== 400) {\r\n                    localStorage.setItem('token', response.data.token);\r\n                    dispatch({\r\n                        type: SIGN_IN_SUCCESS,\r\n                        payload: {\r\n                            message: \"Успешная отправка\",\r\n                            token: response.data.token\r\n                        }\r\n                    })\r\n                } else\r\n                    throw new Error();\r\n            })\r\n            .catch(reason => {\r\n                dispatch({\r\n                    type: SIGN_IN_FAILED,\r\n                    payload: {\r\n                        message: reason.toString()\r\n                    }\r\n                })\r\n            })\r\n    }\r\n}\r\n\r\nexport function signInWithToken(token) {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: SIGN_IN_WITH_TOKEN_REQUEST\r\n        });\r\n\r\n        axios.post('/login', {},{\r\n            headers:{\r\n                'Authorization': 'Bearer ' + token\r\n            }\r\n        }\r\n        )\r\n            .then(response => {\r\n                if (response.status !== 400) {\r\n                    dispatch({\r\n                        type: SIGN_IN_WITH_TOKEN_SUCCESS,\r\n                        payload: {\r\n                            message: \"Успешная отправка\",\r\n                            login: response.data.login,\r\n                            token:token\r\n                        }\r\n                    })\r\n                } else\r\n                    throw new Error();\r\n            })\r\n            .catch(reason => {\r\n                localStorage.removeItem('token');\r\n                dispatch({\r\n                    type: SIGN_IN_WITH_TOKEN_FAILED,\r\n                    payload: {\r\n                        message: 'Невалидный или отсутствующий токен'\r\n                    }\r\n                })\r\n            })\r\n    }\r\n}\r\n\r\nexport function signOut() {\r\n    localStorage.removeItem('token');\r\n    return {\r\n        type: SIGN_OUT\r\n    }\r\n}\r\n\r\nexport function restoreToken() {\r\n    let token = localStorage.getItem('token');\r\n    return {\r\n        type: CHECK_TOKEN,\r\n        payload: (token !== null ? token : null)\r\n    }\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nclass InputLogin extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    onChange(e) {\r\n        this.props.setValue(e.target.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={'block'+this.props.class}>\r\n                <label htmlFor=\"login\" className={'label'+this.props.class}>Login</label>\r\n                <input type=\"text\"\r\n                       id={\"login\"}\r\n                       name={\"login\"}\r\n                       className={'input'+this.props.class}\r\n                       onChange={this.onChange}\r\n                       placeholder={this.props.login}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nInputLogin.propTypes = {\r\n    login: PropTypes.string,\r\n    class: PropTypes.string.isRequired\r\n};\r\n\r\nexport default InputLogin;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nclass InputPassword extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    onChange(e) {\r\n        this.props.setValue(e.target.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={'block'+this.props.class}>\r\n                <label htmlFor=\"password\" className={'label'+this.props.class}>Password</label>\r\n                <input type=\"password\"\r\n                       id={\"password\"}\r\n                       name={\"password\"}\r\n                       className={'input'+this.props.class}\r\n                       onChange={this.onChange}\r\n                       placeholder={this.props.password}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nInputPassword.propTypes = {\r\n    password: PropTypes.string,\r\n    class:PropTypes.string.isRequired\r\n};\r\n\r\nexport default InputPassword;","import React from 'react';\r\nimport Header from \"../views/components/Header/Header\";\r\nimport Footer from \"../views/components/Footer/Footer\";\r\nimport InputLogin from \"../views/components/Authorization/InputLogin\";\r\nimport InputPassword from \"../views/components/Authorization/InputPassword\";\r\nimport {changeLogin, changePassword, signIn} from \"../actions/authorizationActions\";\r\nimport PropTypes from \"prop-types\";\r\nimport {connect} from 'react-redux';\r\nimport NavBar from \"../views/components/NavBar/NavBar\";\r\n\r\n\r\nclass Authorization extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleForm = this.handleForm.bind(this);\r\n    }\r\n\r\n    handleForm(e) {\r\n        e.preventDefault();\r\n        this.props.signIn({\r\n            login: this.props.store.login,\r\n            password: this.props.store.password\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const store = this.props.store;\r\n        return (\r\n            <div>\r\n                <Header/>\r\n                <NavBar/>\r\n                <div className=\"authorization-body\">\r\n                    <div className=\"authorization__title\">\r\n                        <h3>Sign in</h3>\r\n                    </div>\r\n                    <div className=\"authorization__content\">\r\n                        <form action=\"/login\" method={\"POST\"} className=\"authorization__content--form\"\r\n                              onSubmit={this.handleForm}>\r\n                            <InputLogin class={'Login'} setValue={this.props.setLogin}/>\r\n                            <InputPassword class={'Password'} setValue={this.props.setPassword}/>\r\n                            <button type={'submit'}>Sign in</button>\r\n                        </form>\r\n                        <div className=\"authorization__content--status\">\r\n                            <p>Login: {store.login}</p>\r\n                            <p>Password: {store.password}</p>\r\n                            {\r\n                                (store.isFetching) ? <p>Отправка на Node.js...</p> :\r\n                                    <p>{store.message}</p>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <Footer/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nAuthorization.propsTypes = {\r\n    store: PropTypes.object.isRequired\r\n};\r\n\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        store: store.authorization\r\n    }\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        signIn: data => dispatch(signIn(data)),\r\n        setLogin:login=>dispatch(changeLogin(login)),\r\n        setPassword:password=>dispatch(changePassword(password))\r\n    }\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Authorization);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from \"prop-types\";\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport Home from \"../containers/Home\";\r\nimport Authenticated from \"../containers/Authenticated\";\r\nimport Authorization from \"../containers/Authorization\";\r\n\r\nclass Routes extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <Switch>\r\n                <Route exact path={\"/\"} component={Home}/>\r\n                {(this.props.store.token !== null) ?\r\n                    <Redirect from={'/login'} to={'/authenticated'}/> :\r\n                    <Redirect from={'/authenticated'} to={'/login'}/>\r\n                }\r\n                <Route path={\"/login\"} component={Authorization}/>\r\n                <Route path={\"/authenticated\"} component={Authenticated}/>\r\n            </Switch>\r\n        );\r\n    }\r\n}\r\n\r\nRoutes.propTypes = {\r\n    store: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        store: store.authorization\r\n    }\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps,)(Routes);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport Routes from \"../routes\";\r\nimport PropTypes from \"prop-types\";\r\nimport {signInWithToken} from \"../actions/authorizationActions\";\r\nimport {timer} from \"redux-logger/src/helpers\";\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        if(localStorage.getItem('token')!==null && this.props.store.authorization.token ===null)\r\n            this.props.bearerToken(localStorage.getItem('token'));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <BrowserRouter>\r\n                <Routes/>\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\n\r\nApp.propsTypes = {\r\n    store: PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps = store => {\r\n    return {\r\n        store: store\r\n    }\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        bearerToken:token=>dispatch(signInWithToken(token))\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n    CHANGE_LOGIN,\r\n    CHANGE_PASSWORD, CHECK_TOKEN,\r\n    SIGN_IN_FAILED,\r\n    SIGN_IN_REQUEST,\r\n    SIGN_IN_SUCCESS, SIGN_IN_WITH_TOKEN_FAILED, SIGN_IN_WITH_TOKEN_REQUEST, SIGN_IN_WITH_TOKEN_SUCCESS, SIGN_OUT\r\n} from \"../constants/authorization\";\r\n\r\nconst initialState = {\r\n    login: \"\",\r\n    password: \"\",\r\n    isFetching: false,\r\n    token: null,\r\n    message: \"\"\r\n};\r\n\r\nexport function authorizationReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case CHANGE_LOGIN:\r\n            return Object.assign({}, state, {login: action.payload});\r\n        case CHANGE_PASSWORD:\r\n            return Object.assign({}, state, {password: action.payload});\r\n        case SIGN_IN_REQUEST:\r\n            return Object.assign({},\r\n                state,\r\n                {\r\n                    login: action.payload.login,\r\n                    password: action.payload.password,\r\n                    isFetching: false,\r\n                    message: 'Отправка на Node...'\r\n                });\r\n        case SIGN_IN_SUCCESS:\r\n            return Object.assign({}, state,\r\n                {message: action.payload.message, isFetching: false, token: action.payload.token});\r\n        case SIGN_IN_FAILED:\r\n            return Object.assign({}, state,\r\n                {message: action.payload.message, isFetching: false});\r\n        case SIGN_OUT:\r\n            return Object.assign({}, state,\r\n                {message: \"\", isFetching: false, token: null});\r\n        case SIGN_IN_WITH_TOKEN_REQUEST:\r\n            return Object.assign({}, state, {\r\n                isFetching: false,\r\n                message: 'Отправка на Node...'\r\n            });\r\n        case SIGN_IN_WITH_TOKEN_SUCCESS:\r\n            return Object.assign({},state,{\r\n                message: action.payload.message, isFetching: false, login: action.payload.login,token:action.payload.token\r\n            });\r\n        case SIGN_IN_WITH_TOKEN_FAILED:\r\n            return Object.assign({}, state,\r\n                {message: action.payload.message, isFetching: false});\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from \"redux\";\r\nimport {authorizationReducer} from \"./authorizationReducer\";\r\n\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    authorization: authorizationReducer\r\n});\r\n","import {createStore, applyMiddleware} from 'redux'\r\nimport {rootReducer} from \"../reducers/rootReducer\";\r\nimport logger from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk, logger));","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './sass/index.scss';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./containers/App\";\r\nimport {store} from \"./store/configureStore\";\r\nimport {Provider} from \"react-redux\";\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n//\r\n// // If you want your app to work offline and load faster, you can change\r\n// // unregister() to register() below. Note this comes with some pitfalls.\r\n// // Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
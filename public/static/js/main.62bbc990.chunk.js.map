{"version":3,"sources":["serviceWorker.js","views/components/Authenticated/InputLogin.jsx","views/components/Authenticated/InputPassword.jsx","constants/authorization.js","views/components/NavBar/NavBarLink.jsx","views/components/NavBar/NavBar.jsx","views/components/Header/Header.jsx","views/components/Footer/Footer.jsx","containers/Authorization.jsx","actions/authorizationActions.js","views/components/Home/ContentCart.jsx","containers/Home.jsx","containers/Authenticated.jsx","routes/index.jsx","containers/App.jsx","reducers/authorizationReducer.js","reducers/rootReducer.js","store/configureStore.js","index.js"],"names":["Boolean","window","location","hostname","match","InputLogin","props","onChange","bind","e","this","setValue","target","value","className","class","htmlFor","type","id","name","placeholder","login","React","Component","InputPassword","password","CHECK_TOKEN","CHANGE_LOGIN","CHANGE_PASSWORD","SIGN_IN_SUCCESS","SIGN_IN_REQUEST","SIGN_IN_FAILED","SIGN_OUT","NavBarLink","exact","activeClassName","to","link","NavBar","Header","src","alt","Footer","Authorization","handleSubmit","preventDefault","signIn","setLogin","setPassword","isFetching","message","onSubmit","propsTypes","PropTypes","bool","isRequired","string","connect","store","console","log","authorization","dispatch","payload","changeLogin","changePassword","data","axios","post","headers","then","response","status","Error","localStorage","setItem","token","catch","reason","toString","ContentCart","container","title","content","Home","classNames","Object","keys","map","key","Authenticated","getItem","onClick","signOut","removeItem","Routes","path","component","from","App","checkToken","object","restoreToken","initialState","rootReducer","combineReducers","state","action","assign","createStore","applyMiddleware","thunk","logger","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.62bbc990.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types'\n\nclass InputLogin extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(e) {\n        this.props.setValue(e.target.value);\n    }\n\n    render() {\n        return (\n            <div className={'block'+this.props.class}>\n                <label htmlFor=\"login\" className={'label'+this.props.class}>Login</label>\n                <input type=\"text\"\n                       id={\"login\"}\n                       name={\"login\"}\n                       className={'input'+this.props.class}\n                       onChange={this.onChange}\n                       placeholder={this.props.login}\n                />\n            </div>\n        );\n    }\n\n}\n\nInputLogin.propTypes = {\n    login: PropTypes.string,\n    class: PropTypes.string.isRequired\n};\n\nexport default InputLogin;","import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nclass InputPassword extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(e) {\n        this.props.setValue(e.target.value);\n    }\n\n    render() {\n        return (\n            <div className={'block'+this.props.class}>\n                <label htmlFor=\"password\" className={'label'+this.props.class}>Password</label>\n                <input type=\"password\"\n                       id={\"password\"}\n                       name={\"password\"}\n                       className={'input'+this.props.class}\n                       onChange={this.onChange}\n                       placeholder={this.props.password}\n                />\n            </div>\n        );\n    }\n\n}\n\nInputPassword.propTypes = {\n    password: PropTypes.string,\n    class:PropTypes.string.isRequired\n};\n\nexport default InputPassword;","export const CHECK_TOKEN=\"CHECK_TOKEN\";\nexport const CHANGE_LOGIN = \"CHANGE_LOGIN\";\nexport const CHANGE_PASSWORD = \"CHANGE_PASSWORD\";\nexport const SIGN_IN_SUCCESS = \"SIGN_IN_SUCCESS\";\nexport const SIGN_IN_REQUEST = \"SIGN_IN_REQUEST\";\nexport const SIGN_IN_FAILED = \"SIGN_IN_FAILED\";\nexport const SIGN_OUT = \"SIGN_OUT\";","import React from 'react';\nimport {NavLink} from \"react-router-dom\";\n\nclass NavBarLink extends React.Component {\n\n\n    render() {\n        return (\n            <NavLink\n                exact={this.props.exact}\n                className={\"nav__link\"}\n                activeClassName={\"nav__link__active\"}\n                to={this.props.link}\n            >\n                {this.props.name}\n            </NavLink>\n        );\n    }\n}\n\n\nexport default NavBarLink;","import React from 'react';\nimport NavBarLink from \"./NavBarLink\";\n\nclass NavBar extends React.Component{\n\n    render() {\n        return(\n            <nav className={'nav-bar'}>\n                <div className={'nav-bar__container'}>\n                <NavBarLink exact={true} link={\"/\"} name={\"Home page\"}/>\n                <NavBarLink link={\"/login\"} name={\"Login\"}/>\n                <NavBarLink link={\"/authenticated\"} name={\"Authenticated\"}/>\n                </div>\n            </nav>\n        );\n    }\n}\n\nexport default NavBar;","import React from 'react';\n\nclass Header extends React.Component{\n    render() {\n        return(\n            <div className={'header'}>\n                <img src=\"/react-gif.gif\" alt=\"\"/>\n            </div>\n        );\n    }\n}\n\nexport default Header;","import React from 'react';\n\nclass Footer extends React.Component{\n    render() {\n        return(\n            <footer className={'footer'}>\n                <div className=\"footer--logo\">\n                    <img src=\"/logo192.png\" alt=\"\"/>\n                </div>\n                <div className=\"footer--content\">\n                    <p>&#169; design by Infernet</p>\n                </div>\n            </footer>\n        );\n    }\n}\n\nexport default Footer;","import React from 'react';\nimport InputLogin from \"../views/components/Authenticated/InputLogin\";\nimport InputPassword from \"../views/components/Authenticated/InputPassword\";\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {Link} from \"react-router-dom\";\nimport {changeLogin, changePassword, signIn} from \"../actions/authorizationActions\";\nimport NavBar from \"../views/components/NavBar/NavBar\";\nimport Header from \"../views/components/Header/Header\";\nimport Footer from \"../views/components/Footer/Footer\";\n\nclass Authorization extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        this.props.signIn({login: this.props.login, password: this.props.password});\n\n    }\n\n    render() {\n        const {setLogin, setPassword, login, password, isFetching, message} = this.props;\n        return (\n            <div>\n                <Header/>\n                <NavBar/>\n                <div className=\"authorization-body\">\n                    <div className=\"authorization__title\">\n                        <h3>Login Page</h3>\n                    </div>\n                    <div className=\"authorization__content\">\n                        <form className={'authorization__content--form'} onSubmit={this.handleSubmit}>\n\n                            <InputLogin login={login} setValue={setLogin} class={'Login'}/>\n                            <InputPassword password={this.props.password} class={'Password'} setValue={setPassword}/>\n                            <button type=\"submit\">sign in</button>\n                        </form>\n                        <div className=\"authorization__content--status\">\n                            <p>Login: {login}</p>\n                            <p>Password: {password}</p>\n                            {(isFetching) ? <p></p> : <p>{message}</p>}\n                        </div>\n                    </div>\n                </div>\n                <Footer/>\n            </div>\n        );\n    }\n}\n\n\nAuthorization.propsTypes = {\n    isFetching: PropTypes.bool.isRequired,\n    message: PropTypes.string\n};\n\nconst mapStateToProps = store => {\n    console.log(store);\n    return {\n        login: store.authorization.login,\n        password: store.authorization.password,\n        isFetching: store.authorization.isFetching,\n        message: store.authorization.message\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        setLogin: login => dispatch(changeLogin(login)),\n        setPassword: password => dispatch(changePassword(password)),\n        signIn: data => dispatch(signIn(data))\n    }\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Authorization);\n","import {\n    CHANGE_LOGIN,\n    CHANGE_PASSWORD, CHECK_TOKEN,\n    SIGN_IN_FAILED,\n    SIGN_IN_REQUEST,\n    SIGN_IN_SUCCESS, SIGN_OUT\n} from \"../constants/authorization\";\nimport axios from \"axios\";\n\nexport function changeLogin(login) {\n    return {\n        type: CHANGE_LOGIN,\n        payload: login\n    }\n}\n\nexport function changePassword(password) {\n    return {\n        type: CHANGE_PASSWORD,\n        payload: password\n    }\n}\n\nexport function signIn(data) {\n    return dispatch => {\n        dispatch({\n            type: SIGN_IN_REQUEST,\n            payload: data\n        });\n        // setTimeout(()=>{\n        //     let min=1;\n        //     let max=1000000;\n        //     let token=Math.floor(Math.random() * (max - min + 1)) + min;\n        //     localStorage.setItem('token',token);\n        //     dispatch({\n        //         type:SIGN_IN_SUCCESS,\n        //         payload:{\n        //             message:\"Успешная отправка\",\n        //             token:token\n        //         }\n        //     })\n        // },5000);\n        axios.post('/login', {\n            login: data.login,\n            password: data.password\n        },\n            {\n                headers:{\n                    Authorization:\"Bearer ТОКЕН\"\n                }\n            }\n        )\n            .then(response => {\n                if (response.status != 400) {\n                    localStorage.setItem('token', response.data.token);\n                    dispatch({\n                        type: SIGN_IN_SUCCESS,\n                        payload: {\n                            message: \"Успешная отправка\",\n                            token: response.data.token\n                        }\n                    })\n                } else\n                    throw new Error();\n            })\n            .catch(reason => {\n                dispatch({\n                    type: SIGN_IN_FAILED,\n                    payload: {\n                        message: reason.toString()\n                    }\n                })\n            })\n    }\n}\n\nexport function signOut() {\n    localStorage.removeItem('token');\n    return {\n        type: SIGN_OUT\n    }\n}\n\nexport function restoreToken() {\n    let token = localStorage.getItem('token');\n    return {\n        type: CHECK_TOKEN,\n        payload: (token ? token : -1)\n    }\n}","import React from 'react';\n\nclass ContentCart extends React.Component {\n\n\n    render() {\n        return (\n            <div className={this.props.class.container}>\n                <p className={this.props.class.title}>{this.props.title}</p>\n                <p className={this.props.class.content}>{this.props.content}</p>\n            </div>\n        );\n    }\n}\n\nexport default ContentCart;","import React from 'react';\nimport {connect} from 'react-redux';\nimport {Link} from \"react-router-dom\";\nimport NavBar from \"../views/components/NavBar/NavBar\";\nimport ContentCart from \"../views/components/Home/ContentCart\";\nimport Footer from \"../views/components/Footer/Footer\";\nimport Header from \"../views/components/Header/Header\";\n\n\nclass Home extends React.Component {\n    render() {\n        const {store} = this.props;\n        let classNames = {\n            container: \"home__content--container\",\n            title: \"home__content--title\",\n            content: \"home__content--content\"\n        };\n        return (\n            <div>\n                <Header/>\n                <NavBar/>\n                <div className={'home-body'}>\n                    <div className={'home__title'}>\n                        <h3>Home page</h3>\n                    </div>\n                    <div className={'home__content'}>\n                        {\n                            (store.authorization.token > -1) ?\n                                Object.keys(store.authorization).map(e => {\n                                return <ContentCart\n                                    key={e}\n                                    class={classNames}\n                                    title={e+':'}\n                                    content={store.authorization[e]}\n                                />;\n                            }):\n                                <ContentCart\n                                    class={classNames}\n                                    title={'Ошибка:'}\n                                    content={'Вы не авторизованы'}\n                                />\n                        }\n                    </div>\n                </div>\n                <Footer/>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = store => {\n    return {\n        store: store\n    }\n};\nexport default connect(mapStateToProps)(Home);","import React from 'react';\nimport {connect} from 'react-redux';\nimport {Link} from \"react-router-dom\";\nimport {signOut} from \"../actions/authorizationActions\";\nimport NavBar from \"../views/components/NavBar/NavBar\";\nimport Header from \"../views/components/Header/Header\";\nimport Footer from \"../views/components/Footer/Footer\";\n\n\nclass Authenticated extends React.Component {\n\n    render() {\n        const {store} = this.props;\n        return (\n            <div>\n                <Header/>\n                <NavBar/>\n                <div className=\"authenticated-body\">\n                    <div className=\"authenticated--title\">\n                        <h3>Authenticated page</h3>\n                    </div>\n                    <ul className={\"authenticated--content\"}>\n                        <li>Login: {store.authorization.login}</li>\n                        <li>Password: {store.authorization.password}</li>\n                        <li>isFetching: {store.authorization.isFetching}</li>\n                        <li>Message: {store.authorization.message}</li>\n                        <li>Token(store): {store.authorization.token}</li>\n                        <li>Token(localstorage): {localStorage.getItem('token') ? localStorage.getItem('token').toString() : ''}</li>\n                    </ul>\n                    <button className={\"authenticated--button\"} onClick={this.props.signOut}>Log out</button>\n                </div>\n                <Footer/>\n            </div>\n        );\n    }\n}\n\n\nconst mapStateToProps = store => {\n    return {\n        store: store\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        signOut: () => dispatch(signOut())\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Authenticated);\n","import {Redirect, Route, Switch} from 'react-router-dom';\nimport React from \"react\";\nimport {connect} from \"react-redux\";\nimport Authorization from \"../containers/Authorization\";\nimport Home from \"../containers/Home\";\nimport Authenticated from \"../containers/Authenticated\";\n\n\nclass Routes extends React.Component {\n    render() {\n        return (\n            <Switch>\n                <Route path={\"/\"} exact component={Home}/>\n                {(this.props.store.authorization.token>-1)?<Redirect from={\"/login\"} to={\"/authenticated\"}/>:<Redirect from={\"/authenticated\"} to={\"/login\"}/>}\n                <Route path={\"/login\"} component={Authorization}/>\n                <Route path={\"/authenticated\"} component={Authenticated}/>\n            </Switch>\n        );\n    }\n}\n\nconst mapStateToProps = store => {\n    return {\n        store: store\n    }\n};\n\nexport default connect(mapStateToProps)(Routes);","import React from 'react';\nimport {connect} from 'react-redux';\nimport {BrowserRouter} from \"react-router-dom\";\nimport Routes from \"../routes\";\nimport PropTypes from \"prop-types\";\nimport {restoreToken} from \"../actions/authorizationActions\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.props.checkToken();\n    }\n\n    render() {\n        return (\n            <BrowserRouter>\n                <Routes/>\n            </BrowserRouter>\n        );\n    }\n}\n\nApp.propsTypes = {\n    store: PropTypes.object.isRequired\n};\nconst mapStateToProps = store => {\n    return {\n        store: store\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        checkToken: () => dispatch(restoreToken())\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n    CHANGE_LOGIN,\n    CHANGE_PASSWORD, CHECK_TOKEN,\n    SIGN_IN_FAILED,\n    SIGN_IN_REQUEST,\n    SIGN_IN_SUCCESS, SIGN_OUT\n} from \"../constants/authorization\";\n\nconst initialState = {\n    login: \"\",\n    password: \"\",\n    isFetching: false,\n    token:-1,\n    message: \"\"\n};\n\nexport function authorizationReducer(state = initialState, action) {\n    switch (action.type) {\n        case CHANGE_LOGIN:\n            return Object.assign({}, state, {login: action.payload});\n        case CHANGE_PASSWORD:\n            return Object.assign({}, state, {password: action.payload});\n        case SIGN_IN_REQUEST:\n            return Object.assign({},\n                state,\n                {\n                    login: action.payload.login,\n                    password: action.payload.password,\n                    isFetching: false,\n                    message: 'Отправка на Node...'\n                });\n        case SIGN_IN_SUCCESS:\n            return Object.assign({}, state,\n                {message: action.payload.message, isFetching: false,token:action.payload.token});\n        case SIGN_IN_FAILED:\n            return Object.assign({}, state,\n                {message: action.payload.message, isFetching: false});\n        case SIGN_OUT:\n            return Object.assign({}, state,\n                {message: \"\", isFetching: false, token: -1});\n        case CHECK_TOKEN:\n            return Object.assign({},state,{token:action.payload});\n        default:\n            return state;\n    }\n}","import {combineReducers} from \"redux\";\nimport {authorizationReducer} from \"./authorizationReducer\";\n\n\n\nexport const rootReducer = combineReducers({\n    authorization: authorizationReducer\n});\n","import {createStore, applyMiddleware} from 'redux'\nimport {rootReducer} from \"../reducers/rootReducer\";\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk, logger));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sass/index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./containers/App\";\nimport {store} from \"./store/configureStore\";\nimport {Provider} from \"react-redux\";\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n//\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}